{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/Xpath",
              "name": "Xpath",
              "shortDescription": {
                "text": "XPath Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nXPath expressions are a standard method of querying data stored in XML format, allowing applications to return data based on attributes, patterns, and more. However, as with other injection-type attacks, if a malicious user is able to manipulate the query that is sent to the server, they may be able to gain control of application flow and logic or access unauthorized data, including user authentication data. This weakness is an inherent design flaw that can be easily corrected through awareness of the hazards of allowing unchecked user input in XPath queries.\n\n### Best practices for prevention\n* Use a parameterized XPath interface for all types of user input if possible.\n* Avoid passing unsanitized parameters to the XML database.\n* Never pass a query directly from the user to the server without sanitizing input.\n* Use a denylist to eliminate user-entered forbidden query characters.\n* Consider using precompiled XPath queries to circumvent issues with user-entered parameters altogether.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/tuscany-sca-2.x/commit/64076f8a50c73faa3e6d755b325bb900c4066a45?diff=split#diff-50fb651810fddf1ecc7a7a383c331819L156",
                    "lines": [
                      {
                        "line": "private ModelResolver domainResolver;",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Map<QName, PolicySet> policySetMap = new Hashtable<QName, PolicySet>();",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "private SCADefinitions systemSCADefinitions = null;",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Contribution contribute(String contributionURI, URL sourceURL, boolean storeInRepository)",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ContributionException, IOException {",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contributionURI == null) {",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IllegalArgumentException(\"URI for the contribution is null\");",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (sourceURL == null) {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IllegalArgumentException(\"Source URL for the contribution is null\");",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return addContribution(contributionURI, sourceURL, null, null, storeInRepository);",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Contribution contribute(String contributionURI,",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               URL sourceURL,",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               ModelResolver modelResolver,",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               boolean storeInRepository) throws ContributionException, IOException {",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IllegalArgumentException(\"URI for the contribution is null\");",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (sourceURL == null) {",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IllegalArgumentException(\"Source URL for the contribution is null\");",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return addContribution(contributionURI, sourceURL, null, modelResolver, storeInRepository);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Contribution contribute(String contributionURI, URL sourceURL, InputStream input)",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ContributionException, IOException {",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return addContribution(contributionURI, sourceURL, input, null, true);",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Contribution contribute(String contributionURI, URL sourceURL, InputStream input, ModelResolver modelResolver)",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ContributionException, IOException {",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return addContribution(contributionURI, sourceURL, input, modelResolver, true);",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Contribution addContribution(String contributionURI,",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     URL sourceURL,",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     InputStream contributionStream,",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     ModelResolver modelResolver,",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     boolean storeInRepository) throws IOException, ContributionException {",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contributionStream == null && sourceURL == null) {",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IllegalArgumentException(\"The content of the contribution is null.\");",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // store the contribution in the contribution repository",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "    URL locationURL = sourceURL;",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contributionRepository != null && storeInRepository) {",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contributionStream == null) {",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "            locationURL = contributionRepository.store(contributionURI, sourceURL);",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "            locationURL = contributionRepository.store(contributionURI, sourceURL, contributionStream);",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "//the stream would be consumed at this point",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (storeInRepository || contributionStream == null) {",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "    URLConnection connection = sourceURL.openConnection();",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "    connection.setUseCaches(false);",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "    contributionStream = connection.getInputStream();",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // process the contribution",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "        contributionArtifacts = this.packageProcessor.getArtifacts(locationURL, contributionStream);",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOHelper.closeQuietly(contributionStream);",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "//contents of definitions.xml in the META-INF/services subdirectory.  So first update the ",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "//policysetMap for the systemSCADefinitions",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "updatePolicySetMap(systemSCADefinitions);",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Read all artifacts in the contribution",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object model = null;",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (URI anArtifactUri : artifacts) {",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ( anArtifactUri.toString().endsWith(COMPOSITE_FILE_EXTN)) {",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "        compositeUris.add(anArtifactUri);",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "        URL artifactURL = packageProcessor.getArtifactURL(new URL(contribution.getLocation()), anArtifactUri);",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Add the deployed artifact model to the resolver",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Artifact artifact = this.contributionFactory.createArtifact();",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "        artifact.setURI(anArtifactUri.toString());",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "        artifact.setLocation(artifactURL.toString());",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "        contribution.getArtifacts().add(artifact);",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "        modelResolver.addModel(artifact);",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "        model = this.artifactProcessor.read(contributionURL, anArtifactUri, artifactURL);",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (model != null) {",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "            artifact.setModel(model);",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // Add the loaded model to the model resolver",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "            modelResolver.addModel(model);",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if ( model instanceof SCADefinitions ) {",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "                contributionSCADefinitions.add((SCADefinitions)model);",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "                updatePolicySetMap((SCADefinitions)model);",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void updatePolicySetMap(SCADefinitions scaDefns) {",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for ( PolicySet policySet : scaDefns.getPolicySets() ) {",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "        policySetMap.put(policySet.getName(), policySet);",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        TransformerConfigurationException,",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        TransformerException  {",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "XPathFactory xpathFactory = XPathFactory.newInstance();",
                        "lineNumber": 548,
                        "lineChange": "removed"
                      },
                      {
                        "line": "XPath path = xpathFactory.newXPath();",
                        "lineNumber": 549,
                        "lineChange": "removed"
                      },
                      {
                        "line": "path.setNamespaceContext(new DOMNamespaceContext(doc));",
                        "lineNumber": 550,
                        "lineChange": "removed"
                      },
                      {
                        "line": "int prefixCount = 1;",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "for ( PolicySet policySet : policySets ) {",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ( policySet.getAppliesTo() != null ) {",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "        addApplicablePolicySets(policySet, path, doc, prefixCount);",
                        "lineNumber": 555,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        addApplicablePolicySets(policySet, doc, prefixCount);",
                        "lineNumber": 548,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ( policySet.getAlwaysAppliesTo() != null ) {",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "        addAlwaysApplicablePolicySets(policySet, path, doc, prefixCount);",
                        "lineNumber": 559,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        addAlwaysApplicablePolicySets(policySet, doc, prefixCount);",
                        "lineNumber": 552,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void addAlwaysApplicablePolicySets(PolicySet policySet, XPath path, Document doc, int prefixCount) throws XPathExpressionException {",
                        "lineNumber": 572,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    XPathExpression expression = path.compile(policySet.getAlwaysAppliesTo());",
                        "lineNumber": 573,
                        "lineChange": "removed"
                      },
                      {
                        "line": "NodeList result = (NodeList)expression.evaluate(doc, XPathConstants.NODESET);",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void addApplicablePolicySets(PolicySet policySet, XPath path, Document doc, int prefixCount) throws XPathExpressionException {",
                        "lineNumber": 603,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    XPathExpression expression = path.compile(policySet.getAppliesTo());",
                        "lineNumber": 604,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private void addApplicablePolicySets(PolicySet policySet, Document doc, int prefixCount) throws XPathExpressionException {",
                        "lineNumber": 596,
                        "lineChange": "added"
                      },
                      {
                        "line": "    XPathExpression expression = policySet.getAppliesToXPathExpression();",
                        "lineNumber": 597,
                        "lineChange": "added"
                      },
                      {
                        "line": "    NodeList result = (NodeList)expression.evaluate(doc, XPathConstants.NODESET);",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "    DocumentBuilder db = dbFac.newDocumentBuilder();",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Document doc = db.parse(artifactUrl.toURI().toString());",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return addApplicablePolicySets(doc, policySetMap.values());",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch ( Exception e ) {",
                        "lineNumber": 642,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throw new ContributionReadException(e);",
                        "lineNumber": 643,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/sumeetchhetri/gatf/commit/c50157f553120ea7746b0423419b5807ea416872?diff=split#diff-dc70e58d15e15cdaa121f51d92ff037dL47",
                    "lines": [
                      {
                        "line": "public class SOAPResponseValidator implements ResponseValidator {",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  public void validate(Response response, TestCase testCase, TestCaseReport testCaseReport, AcceptanceTestContext context) ",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  {",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DocumentBuilder db = dbf.newDocumentBuilder();",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Document xmlDocument = db.parse(new ByteArrayInputStream(response.getResponseBody().getBytes()));",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if(testCase.getAexpectedNodes()!=null && !testCase.getAexpectedNodes().isEmpty())",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "for (String node : testCase.getAexpectedNodes()) {",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  String[] nodeCase = node.split(\",\");",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Node envelope = getNodeByNameCaseInsensitive(xmlDocument.getFirstChild(), \"envelope\");",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Node body = getNodeByNameCaseInsensitive(envelope, \"body\");",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Node requestBody = getNextElement(body);",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Node returnBody = getNextElement(requestBody);",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  expression = expression.replaceAll(\"/[\", \"[\");",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "XPath xPath =  XPathFactory.newInstance().newXPath();",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "NodeList xmlNodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Assert.assertTrue(\"Expected Node \" + nodeCase[0] + \" is null\", ",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    xmlNodeList!=null && xmlNodeList.getLength()>0);",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "context.getWorkflowContextHandler().extractSoapWorkflowVariables(testCase, xmlDocument);",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if(context.getGatfExecutorConfig().isSoapAuthEnabled() && context.getGatfExecutorConfig().isSoapAuthTestCase(testCase)) {",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Node envelope = getNodeByNameCaseInsensitive(xmlDocument.getFirstChild(), \"envelope\");",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Node body = getNodeByNameCaseInsensitive(envelope, \"body\");",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Node requestBody = getNextElement(body);",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Node returnBody = getNextElement(requestBody);",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 117,
                        "lineChange": "removed"
                      },
                      {
                        "line": "public static String getLocalNodeName(String nodeName) {",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if(nodeName!=null && nodeName.indexOf(\":\")!=-1) {",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return nodeName.substring(nodeName.indexOf(\":\")+1);",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return nodeName;",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static Node getNodeByNameCaseInsensitive(Node node, String nodeName) {",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if(node.getNodeName().equalsIgnoreCase(nodeName) ||",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "      getLocalNodeName(node.getNodeName()).equalsIgnoreCase(nodeName))",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return node;",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  for (int i=0;i<node.getChildNodes().getLength();i++) {",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if(node.getChildNodes().item(i).getNodeType()==Node.ELEMENT_NODE) {",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(node.getChildNodes().item(i).getNodeName().equalsIgnoreCase(nodeName) ||",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "          getLocalNodeName(node.getChildNodes().item(i).getNodeName()).equalsIgnoreCase(nodeName)) {",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return node.getChildNodes().item(i);",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static String createXPathExpression(String suffix, Node... nodes) {",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "  StringBuilder build = new StringBuilder();",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  for (Node node : nodes) {",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    build.append(\"/\");",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "    build.append(getLocalNodeName(node.getNodeName()));",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "  build.append(\"/\");",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "  build.append(suffix.replaceAll(\"\\\\.\", \"\\\\/\"));",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return build.toString();",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "Node body = getNodeByNameCaseInsensitive(envelope, \"body\");",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "Node requestBody = getNextElement(body);",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "String expression = createXPathExpression(entry.getKey(), envelope, body, requestBody);",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "XPath xPath = XPathFactory.newInstance().newXPath();",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "NodeList nodelist = (NodeList) xPath.compile(expression).evaluate(soapMessage, XPathConstants.NODESET);",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "Assert.assertNotNull(\"Cannot find soap parameter \" + entry.getKey(), ",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "    nodelist!=null && nodelist.getLength()>0);",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected Object getInternalObject(Response response) throws Exception",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "{",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "  DocumentBuilder db = dbf.newDocumentBuilder();",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Document xmlDocument = db.parse(new ByteArrayInputStream(response.getResponseBody().getBytes()));",
                        "lineNumber": 104,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return xmlDocument;",
                        "lineNumber": 105,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 106,
                        "lineChange": "added"
                      },
                      {
                        "line": "protected String getNodeValue(Object intObj, String node) throws Exception {",
                        "lineNumber": 108,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Document xmlDocument = (Document)intObj;",
                        "lineNumber": 109,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Node envelope = getNodeByNameCaseInsensitive(xmlDocument.getFirstChild(), \"envelope\");",
                        "lineNumber": 110,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Node body = getNodeByNameCaseInsensitive(envelope, \"body\");",
                        "lineNumber": 111,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Node requestBody = getNextElement(body);",
                        "lineNumber": 112,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Node returnBody = getNextElement(requestBody);",
                        "lineNumber": 113,
                        "lineChange": "added"
                      },
                      {
                        "line": "    expression = expression.replaceAll(\"/[\", \"[\");",
                        "lineNumber": 116,
                        "lineChange": "added"
                      },
                      {
                        "line": "  NodeList xmlNodeList = getNodeByXpath(expression, (Document)intObj, null);",
                        "lineNumber": 117,
                        "lineChange": "added"
                      },
                      {
                        "line": "  String xmlValue = getXMLNodeValue(xmlNodeList.item(0));",
                        "lineNumber": 118,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return xmlValue;",
                        "lineNumber": 119,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 120,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/francelabs/datafari/commit/859dda11d3f20d17ffb855be5ebfd5c2f7f25190?diff=split#diff-06adf0b7433150ff3d2937d4389e130aL100",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doGet(final HttpServletRequest request, final HttpServletResponse response)",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "  request.setCharacterEncoding(\"utf8\");",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  response.setContentType(\"application/json\");",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "// If a fieldname has been provided, it means that this servlet only",
                        "lineNumber": 112,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// needs to return infos on this specific field",
                        "lineNumber": 113,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (request.getParameter(\"fieldName\") != null) {",
                        "lineNumber": 114,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final String fieldName = request.getParameter(\"fieldName\");",
                        "lineNumber": 115,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final XPathFactory xPathfactory = XPathFactory.newInstance();",
                        "lineNumber": 116,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final XPath xpath = xPathfactory.newXPath();",
                        "lineNumber": 117,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  XPathExpression expr;",
                        "lineNumber": 118,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  // search for the provided field with Xpath",
                        "lineNumber": 120,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  expr = xpath.compile(\"//field[@name=\\\"\" + fieldName + \"\\\"]\");",
                        "lineNumber": 121,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final Node fieldNode = (Node) expr.evaluate(docSchem, XPathConstants.NODE);",
                        "lineNumber": 122,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (fieldNode != null) {",
                        "lineNumber": 123,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// Use Solr Schema REST API to get the list of fields",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "final HttpClient httpClient = HttpClientBuilder.create().build();",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "final HttpHost httpHost = new HttpHost(solrserver, Integer.parseInt(solrport), protocol);",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "final HttpGet httpGet = new HttpGet(\"/solr/FileShare/schema/fields\");",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "final HttpResponse httpResponse = httpClient.execute(httpHost, httpGet);",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Construct the jsonResponse",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "final JSONObject jsonResponse = new JSONObject();",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (httpResponse.getStatusLine().getStatusCode() == 200) {",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "  // Status of the API response is OK",
                        "lineNumber": 93,
                        "lineChange": "added"
                      },
                      {
                        "line": "  final JSONObject json = new JSONObject(EntityUtils.toString(httpResponse.getEntity()));",
                        "lineNumber": 94,
                        "lineChange": "added"
                      },
                      {
                        "line": "// only",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "// needs to return infos on this specific field",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (request.getParameter(\"fieldName\") != null) {",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "  final String fieldName = request.getParameter(\"fieldName\");",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if (field.getString(\"name\").equals(fieldName)) {",
                        "lineNumber": 104,
                        "lineChange": "added"
                      },
                      {
                        "line": "    jsonResponse.append(\"field\", field);",
                        "lineNumber": 105,
                        "lineChange": "added"
                      },
                      {
                        "line": "    break;",
                        "lineNumber": 106,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added support for templatizing the live provider query",
                  "Added operator support for node validations"
                ],
                "precision": "very-high",
                "repoDatasetSize": 5,
                "cwe": [
                  "CWE-643"
                ]
              }
            },
            {
              "id": "java/WebCookieWithSecureFalse",
              "name": "WebCookieWithSecureFalse",
              "shortDescription": {
                "text": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nIn a session hijacking attack, if a cookie containing sensitive data is set without the `secure` attribute, an attacker might be able to intercept that cookie. Once the attacker has this information, they can potentially impersonate a user, accessing confidential data and performing actions that they would not normally be authorized to do. Attackers often gain access to this sensitive cookie data when it is transmitted insecurely in plain text over a standard HTTP session, rather than being encrypted and sent over an HTTPS session. This type of attack is highly preventable by following best practices when setting sensitive session cookies.\n\n### Best practices for prevention\n* Set the `secure` attribute in the response header when setting cookies on the client side, and use a test tool to verify that secure cookie transmission is in place.\n* Always use HTTPS for all login pages and never redirect from HTTP to HTTPS, which leaves secure session data open to interception.\n* Follow other best practices when it comes to session cookies, such as setting the HttpOnly flag and maintaining highly time-limited sessions.\n* Consider implementing browser checks and providing secure data only within a browser that supports tight cookie security.\n* Generate session IDs in a way that is not easily predictable, invalidate sessions upon logout, and never reuse session IDs.\n* Educate developers to use built-in secure session-management functionality within the development environment instead of taking a DIY approach.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/zalando-zmon/zmon-controller/commit/7e25a7614841c630e5e1dba079b742e0f1a04255?diff=split#diff-d534d752fd2cf229b52e56c08170459aL130",
                    "lines": [
                      {
                        "line": "try {",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String tokenValue = getJwtTokenValue(successfulAuthentication);",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cookie cookie = new Cookie(COOKIE_NAME, tokenValue);",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setComment(\"Cookie created by ZMON\");",
                        "lineNumber": 130,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cookie.setComment(\"Cookie with jwt created by ZMON\");",
                        "lineNumber": 130,
                        "lineChange": "added"
                      },
                      {
                        "line": "    cookie.setMaxAge(-1);// expire when browser closed",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setPath(\"/\");",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // cookie.setDomain(pattern);",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setSecure(false); // both, http and https",
                        "lineNumber": 134,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cookie.setSecure(true);",
                        "lineNumber": 134,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response.addCookie(cookie);",
                        "lineNumber": 136,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ninjaframework/ninja/commit/d730a1f4119873300ed92910bc571ce88fbad53b?diff=split#diff-01ff3609e77183045fd41f70088e07a8L121",
                    "lines": [
                      {
                        "line": "String flashData = URLEncoder.encode(flash.toString(), \"utf-8\");",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "Cookie cookie = new Cookie(applicationCookiePrefix",
                        "lineNumber": 120,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cookie.Builder cookie = Cookie.builder(applicationCookiePrefix",
                        "lineNumber": 117,
                        "lineChange": "added"
                      },
                      {
                        "line": "        + ninja.utils.NinjaConstant.FLASH_SUFFIX, flashData);",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "cookie.setPath(\"/\");",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "cookie.setSecure(false);",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "// \"-1\" does not set \"Expires\" for that cookie",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "// => Cookie will live as long as the browser is open theoretically",
                        "lineNumber": 125,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/CodeStory/fluent-http/commit/67fb17637946f272834c1aa26c4afa88fc8c4027?diff=split#diff-9585758e8e53fdfdfc59ec69791d3fbaL150",
                    "lines": [
                      {
                        "line": " }",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static Cookie cookie(String name, String value) {",
                        "lineNumber": 148,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return expire(new Cookie(name, value, \"/\", true));",
                        "lineNumber": 149,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private static NewCookie cookie(String name, String value) {",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return expire(new NewCookie(name, value, \"/\", true));",
                        "lineNumber": 148,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static Cookie expire(Cookie cookie) {",
                        "lineNumber": 152,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private static NewCookie expire(NewCookie cookie) {",
                        "lineNumber": 151,
                        "lineChange": "added"
                      },
                      {
                        "line": "  cookie.setExpiry(ONE_DAY);",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "  cookie.setDomain(null);",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "  cookie.setSecure(false);",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return cookie;",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 157,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "- added missing properties temporarily to fix bamboo build",
                  "Hide SimpleHttp layer even more"
                ],
                "precision": "very-high",
                "repoDatasetSize": 45,
                "cwe": [
                  "CWE-614"
                ]
              }
            },
            {
              "id": "java/Sqli",
              "name": "Sqli",
              "shortDescription": {
                "text": "SQL Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n### Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/jeffdcamp/dbtools-android/commit/2643c30c302955a03233847c154350e424cca1d9?diff=split#diff-e2f0ab1619799e644c57ba98ebe6f39aL474",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "public int delete(@Nonnull SQLiteDatabase db, @Nullable String where, @Nullable String[] whereArgs) {",
                        "lineNumber": 473,
                        "lineChange": "removed"
                      },
                      {
                        "line": "public int delete(@Nonnull DatabaseWrapper db, @Nullable String where, @Nullable String[] whereArgs) {",
                        "lineNumber": 412,
                        "lineChange": "added"
                      },
                      {
                        "line": "    checkDB(db);",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int rowsAffected = 0;",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int tryCount = 0; tryCount < MAX_TRY_COUNT && !success; tryCount++) {",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "        rowsAffected = db.delete(getTableName(), where, whereArgs);",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "        postDeleteEvent(db, getTableName(), rowsAffected);",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "        success = true;",
                        "lineNumber": 483,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/keycloak/keycloak/commit/c8c86d2badb5ed97f9fbfe2c98e190c5a73cdb66?diff=split#diff-df89d441bd8b2c3dd63c28b12e23245dL47",
                    "lines": [
                      {
                        "line": "@Inject",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "private EntityManager entityManager;",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Context",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Path(\"{id}\")",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Produces(\"application/json\")",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Response findById(@PathParam(\"id\") String id) {",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    List result = this.entityManager.createQuery(\"from Album where id = \" + id).getResultList();",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    List result = this.entityManager.createQuery(\"from Album where id = \" + Long.valueOf(id)).getResultList();",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (result.isEmpty()) {",
                        "lineNumber": 104,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nuls-io/nuls/commit/7ff6aaf43ba54ec5cce6d03f7243e5a941fb3e4a?diff=split#diff-0444fba3b07c567a52ceed78978dc18bR532",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @return",
                        "lineNumber": 529,
                        "lineChange": "added"
                      },
                      {
                        "line": " */",
                        "lineNumber": 530,
                        "lineChange": "added"
                      },
                      {
                        "line": "@Deprecated",
                        "lineNumber": 531,
                        "lineChange": "added"
                      },
                      {
                        "line": "public static Result delete(String area, String key) {",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!baseCheckArea(area)) {",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return new Result(true, \"KV_AREA_NOT_EXISTS\");",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (StringUtils.isBlank(key)) {",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Result.getFailed(KernelErrorCode.NULL_PARAMETER);",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "        DB db = AREAS.get(area);",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.delete(bytes(key));",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Result.getSuccess();",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (Exception e) {",
                        "lineNumber": 549,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "- Support hive user impersonation on hive tables page",
                  "* Moves converter pattern to Java 11",
                  "Add query logging."
                ],
                "precision": "very-high",
                "repoDatasetSize": 197,
                "cwe": [
                  "CWE-89"
                ]
              }
            },
            {
              "id": "java/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-33b6b27033cb88022415e8cd32b1807cL244",
                    "lines": [
                      {
                        "line": " * Extract a ZipEntry to the specified directory.",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File outputFile = new File(dir, entry.getName());",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File parentFile = outputFile.getParentFile();",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!parentFile.isDirectory() && !parentFile.mkdirs()) {",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract file to \" + dir.getPath());",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      || (!parentFile.isDirectory() && !parentFile.mkdirs())) {",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try (InputStream inputStream = zipFile.getInputStream(entry);",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileOutputStream outputStream = new FileOutputStream(outputFile)) {",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] buf = new byte[1024];",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int n;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/synopsys-detect/commit/36555b9322986e9560f241d05f2262c29a17663b?diff=split#diff-bc0b5be9b9918488d8fe1dc64584df62L48",
                    "lines": [
                      {
                        "line": "Enumeration<? extends ZipEntry> entries = zipFile.entries();",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipEntry entry = entries.nextElement();",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path entryPath = destPath.resolve(entry.getName());",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!entryPath.normalize().startsWith(dest.toPath()))",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throw new IOException(\"Zip entry contained path traversal\");",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (entry.isDirectory()) {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath);",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath.getParent());",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try (InputStream in = zipFile.getInputStream(entry)) {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try (OutputStream out = new FileOutputStream(entryPath.toFile())) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IOUtils.copy(in, out);",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 58,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/azkaban/azkaban/commit/3b74a4127c9086cd525252edabc3621febab0428?diff=split#diff-c892cca6401b1e0be4cbca3261b47098L201",
                    "lines": [
                      {
                        "line": "final Enumeration<?> entries = source.entries();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final ZipEntry entry = (ZipEntry) entries.nextElement();",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final File newFile = new File(dest, entry.getName());",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!newFile.getCanonicalPath().startsWith(dest.getCanonicalPath())) {",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"Extracting zip entry would have resulted in a file outside the specified destination\"",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (entry.isDirectory()) {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.mkdirs();",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.getParentFile().mkdirs();",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final InputStream src = source.getInputStream(entry);",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final OutputStream output =",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new BufferedOutputStream(new FileOutputStream(newFile));",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copy(src, output);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test changed key to file.",
                  "* more code cleanup, some tests",
                  "Add option --xcode for Xcode translation testing"
                ],
                "precision": "very-high",
                "repoDatasetSize": 948,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/utluiz/spring-examples/commit/56e44932a3a004c3ac96ce1caa3e6d8817230f6e?diff=split#diff-19d771f687bc8ca37d378c39d20ed425L26",
                    "lines": [
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost:3311/agenda\");",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost/agenda\");",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ds.setUser(\"root\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ds.setPassword(\"root\");",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setPassword(\"\");",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return ds;",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Evolveum/midpoint/commit/9ce1d7ff1e78ca65d6b614c52035e1971d1187cd?diff=split#diff-0003b3a408395a5640011d7c8422d19bL43",
                    "lines": [
                      {
                        "line": "      // set the password for our message.",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "      pc.setPassword(\"5ecr3t\");",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      pc.setPassword(Main.ADM_PASSWORD);",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 43,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/theonedev/onedev/commit/ee60c786981347fc5ab6685656f3de2ea67045f7?diff=split#diff-7f6f95fdc3f39c216b4bd099d0ca65b6L60",
                    "lines": [
                      {
                        "line": "  System.exit(1);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "root.setPassword(\"12345\");",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = Bootstrap.command.getArgs()[0];",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "root.setPassword(password);",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "accountManager.save(root);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added user/password configuration from YML file.",
                  "Added ability to configure databases to run tests against."
                ],
                "precision": "very-high",
                "repoDatasetSize": 383,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/WebCookieMissesCallToSetHttpOnly",
              "name": "WebCookieMissesCallToSetHttpOnly",
              "shortDescription": {
                "text": "Sensitive Cookie Without 'HttpOnly' Flag"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nThe `HttpOnly` flag is a simple parameter used when setting a user cookie to ensure that cookies with sensitive session data are visible only to the browser rather than to scripts. This helps prevent cross-site scripting attacks, in which an attacker gains access to sensitive session information and uses this information to trick legitimate web-based applications into disclosing confidential information or accepting illegitimate requests. When developers use the `HttpOnly` flag to set the cookie, they ensure that this sensitive session information is not readable or writable except by the browser (read) and server (write), respectively. While most modern browsers and versions now recognize the HttpOnly flag, some legacy and custom browsers still do not.\n\n### Best practices for prevention\n* Include the `HttpOnly` attribute in the response header when setting cookies on the client side. Be aware, however, that this crucial step provides only partial remediation.\n* Integrate client-side scripts to determine browser version; require browser compatibility or avoid transmitting sensitive data to browsers that do not support `HttpOnly`.\n* Understand and evaluate risks of third-party components or plugins, which may expose cookies.\n* Educate developers in a zero-trust approach, understanding the risks and best practices to prevent cross-site scripting, such as sanitizing all user input for code and special characters.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/417511458/jbone/commit/af32abbc24e2e27aad90f60f96cb9de5d1794a6b?diff=split#diff-a896741011f3ab283be812e19dc1cdb1L167",
                    "lines": [
                      {
                        "line": "@Bean",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "public SimpleCookie getCookie(){",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SimpleCookie cookie = new SimpleCookie();",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setName(\"jbone.session.id\");",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setHttpOnly(false);",
                        "lineNumber": 168,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return cookie;",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 170,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Dreampie/Resty/commit/2808658b3e7d46ebac839fa9620b84bc7eb38e55?diff=split#diff-6c1831bb7349c574c1ec5a92f5ca0072L60",
                    "lines": [
                      {
                        "line": "  }",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  Cookie c = new Cookie(cookie, value);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  c.setPath(\"/\");",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  c.setMaxAge(expiration);",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  c.setHttpOnly(httpOnly);",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "  response.addCookie(c);",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/igniterealtime/Openfire/commit/db32bf15648e53d810be358f6fe8bb914544dad9?diff=split#diff-ccf715fb4529c9f89d175d29aef63cf5L127",
                    "lines": [
                      {
                        "line": "        path = \"/\";",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cookie cookie = new Cookie(name, value);",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setMaxAge(maxAge);",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setPath(path);",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setHttpOnly(true);",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response.addCookie(cookie);",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 131,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Implemented Cookie HttpOnly support."
                ],
                "precision": "very-high",
                "repoDatasetSize": 103,
                "cwe": [
                  "CWE-1004"
                ]
              }
            },
            {
              "id": "java/ServerInformationExposure",
              "name": "ServerInformationExposure",
              "shortDescription": {
                "text": "Server Information Exposure"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nWhen a command to your site or application fails, it should do so gracefully, meaning that the user is informed that there has been a problem, rather than experiencing erratic behavior, such as crashing, hanging, or returning a 404 or similar generic error page.\n\nIn some cases, developers include information in an error message to help pinpoint the source of an error; these may include username, password, application path, stack values, and other internal details. When this weakness is present, if these logs are accessible to an attacker, it may give them clues as to the inner workings of the app, helping them plan a focused attack. For example, clues revealing SQL database details may help plan an SQL injection attack.\n\n### Best practices for prevention\n* Keep error messages to the barest minimum of helpful information that users absolutely need to know.\n* Use consistent error messages that do not give attackers clues that they might be on the right track to a successful attack, such as \"File not found\" or \"User name does not exist\".\n* Ensure that debugging information is removed from code prior to release.\n* Create clear policy for the types of errors that must be logged, which messages will be displayed to users, and which details will be logged for later alerting and debugging.\n* When logging error details, never include sensitive information such as passwords.\n* Implement naming conventions that will help you flag and defend sensitive information.\n* Use dynamic (white box) test techniques to identify conditions that could cause errors and failures and test thoroughly to ensure that the code performs gracefully without revealing sensitive data under these stress conditions.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Nastel/tnt4j-stream-jmx/commit/624c5a0fb347a42756d8585cc79af68fa337e9f0?diff=split#diff-35c1f73e10eae0fa3bae03b3fac7f022L139",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (req.getRequestURI().endsWith(\"/js/tntJmx.js\")) {",
                        "lineNumber": 155,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.setContentType(\"application/javascript\");",
                        "lineNumber": 156,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 165,
                        "lineChange": "added"
                      },
                      {
                        "line": "PrintWriter out = resp.getWriter();",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "out.println(\"<html>\");",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "out.println(\"<body>\");",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (Exception e) {",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "  out.println(\"!!! NO captured output available !!!\");",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "  e.printStackTrace(out);",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "out.println(\"</textarea>\");",
                        "lineNumber": 365,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nidi3/raml-tester-proxy/commit/32b2457bebfeeb1f72610b98a2ff31ac2361f092?diff=split#diff-3414551db540ee26f840d182e6e6c029L77",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "public boolean handleCommands(HttpServletRequest request, HttpServletResponse response) throws IOException {",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!request.getPathInfo().startsWith(\"/@@@proxy\")) {",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!request.getPathInfo().startsWith(COMMAND_PATH) || \"true\".equals(request.getHeader(IGNORE_COMMANDS_HEADER))) {",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final String command = request.getPathInfo().substring(10);",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final PrintWriter writer = response.getWriter();",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    switch (command) {",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        case \"stop\":",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (Exception e) {",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "        writer.println(\"illegal options: '\" + raw + \"'\");",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        e.printStackTrace(writer);",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 164,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dropwizard/dropwizard/commit/0d143d7bc35351a135f8dc82c5e6f78d1eb39268?diff=split#diff-2339a287a25047fea1fc16e74728a1c1L116",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doPost(HttpServletRequest req,",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "                      HttpServletResponse resp) throws ServletException, IOException {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final Task task = tasks.get(req.getPathInfo());",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (task != null) {",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.setContentType(MediaType.PLAIN_TEXT_UTF_8.toString());",
                        "lineNumber": 118,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resp.setContentType(CONTENT_TYPE);",
                        "lineNumber": 121,
                        "lineChange": "added"
                      },
                      {
                        "line": "        final PrintWriter output = resp.getWriter();",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final TaskExecutor taskExecutor = taskExecutors.get(task);",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output.println();",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output.println(e.getMessage());",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    e.printStackTrace(output);",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "} finally {",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output.close();",
                        "lineNumber": 133,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Create a base class for API controller servlets.",
                  "Unit tests for import and export APIs",
                  "SDB/MySQL connection pooling"
                ],
                "precision": "very-high",
                "repoDatasetSize": 27,
                "cwe": [
                  "CWE-209"
                ]
              }
            },
            {
              "id": "java/UserControlledFormatString",
              "name": "UserControlledFormatString",
              "shortDescription": {
                "text": "Use of Externally-Controlled Format String"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSimilar to SQL injection and other injection-type weaknesses, a format string weakness is one in which the user is able to control the application's execution by supplying unexpected input. In this case, the input string is passed directly from the user to a format function such as printf (this weakness appears primarily in C-type languages).\n\nFormat functions were originally designed to provide more flexible output options through specified parameters. However, if input is passed directly from the user to the site or application without sanitization, an attacker may add special characters that will then be interpreted as formatting parameters, causing the application to behave unpredictably, read/write in unauthorized memory locations, crash, or even permit the attacker to execute commands. Since format functions with this weakness may behave exactly like properly coded format functions (until the weakness is exploited), it may be difficult to identify with standard testing.\n\n### Best practices for prevention\n* Implement constraints for user input wherever possible (permitted length, special characters, etc.).\n* Always perform input validation; never pass user data directly to the application.\n* Avoid single-parameter calls to format functions. Always pass a format-specifying parameter, ideally one that is not user-controlled, to the format function in addition to the text output. Never allow user-controlled input to be the only parameter passed.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/smallnest/rpcx/commit/50efb35e9bba64475926c5f889bf6c358e2b8674?diff=split#diff-2823fc895b73b773112c1e6bf77e7339L13",
                    "lines": [
                      {
                        "line": "try {",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Socket socket = new Socket(hostName, portNumber);",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(r);",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "String s;",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "while ((s = in.readLine()) != null) {",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.printf(s);",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    System.out.Infof(s);",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/erhard-lab/gedi/commit/ae69410fbff0ba89d2f8fea4f49946aa9c148510?diff=split#diff-ad748c6abd9458965466d2ddabd4ddf3L34",
                    "lines": [
                      {
                        "line": "public class ViewRMQ {",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void main(String[] args) throws IOException {",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (args.length<1) {",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "      usage();",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "DiskGenomicNumericProvider prov = new DiskGenomicNumericProvider(args[0]);",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (args.length==1) {",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    prov.dump(Chromosome.obtain(p.substring(0,sep)),GenomicRegion.parse(p.substring(sep+1)), s->System.out.print(s));",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (args.length==4) {",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String p = args[1];",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  int sep = p.indexOf(':');",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ReferenceSequence ref = Chromosome.obtain(p.substring(0,sep));",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  GenomicRegion region = GenomicRegion.parse(p.substring(sep+1));",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  int interval = Integer.parseInt(args[3]);",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int s = 0; s<region.getTotalLength(); s+=interval) {",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "  System.out.printf(\"%s\\t%d\",ref,region.induce(s));",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  System.out.printf(Locale.US,\"%s\\t%d\",ref,region.induce(s));",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "  for (int i=0; i<prov.getNumDataRows(); i++)",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.printf(\"\\t\"+agg.getAggregatedValue(prov, ref, new ArrayGenomicRegion(s,s+interval), i));",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    System.out.printf(Locale.US,\"\\t\"+agg.getAggregatedValue(prov, ref, new ArrayGenomicRegion(s,s+interval), i));",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "  System.out.println();",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 74,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SailFlorve/RunHDU/commit/482e58a54710661ffc7a4f7e8d1e9862837048dd?diff=split#diff-5084bca763e7733b5859ad61a2d18676L19",
                    "lines": [
                      {
                        "line": "private Button GzipButton;",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Button zipButton;",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "private EditText text;",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "private TextView compressInfoText;",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "GzipButton = (Button) findViewById(R.id.GZip_compress_button);",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "zipButton = (Button) findViewById(R.id.zip_compress_button);",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "text = (EditText) findViewById(R.id.lab_text);",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "compressInfoText = (TextView) findViewById(R.id.compress_info_text);",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "compressInfoText.setText(String.format(\"压缩前：%d\", text.length()));",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "GzipButton.setOnClickListener(v -> {",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String str = text.getText().toString();",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String zipStr = ZipUtil.compress(str);",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    text.setText(String.format(zipStr));",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    text.setText(zipStr);",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "    compressInfoText.setText(String.format(\"压缩后%d\", zipStr.length()));",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GzipButton.setClickable(false);",
                        "lineNumber": 36,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Factor class Keyword out of Flag.",
                  "de-/select tags for message;"
                ],
                "precision": "very-high",
                "repoDatasetSize": 55,
                "cwe": [
                  "CWE-134"
                ]
              }
            },
            {
              "id": "java/SpringCSRF",
              "name": "SpringCSRF",
              "shortDescription": {
                "text": "Spring Cross-Site Request Forgery (CSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.\n\n### Best practices for prevention\n\n* Use a vetted library or framework which has anti-CSRF packages that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Consider including Spring Security library within your application.\n\n\n## References\n\n* [Spring Security Docs](https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html)\n* [A Guide to CSRF Protection in Spring Security](https://www.baeldung.com/spring-security-csrf)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/b2ihealthcare/snow-owl/commit/722fad49d7ddb54e7e02fd78f313430995d228e4?diff=split#diff-f59eb752a50c2ebcbabc353bc0277647L93",
                    "lines": [
                      {
                        "line": "@RequestMapping(method=RequestMethod.POST)",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "public String createCodeSystem(",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "@ResponseStatus(HttpStatus.CREATED)",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "public ResponseEntity<Void> createCodeSystem(",
                        "lineNumber": 98,
                        "lineChange": "added"
                      },
                      {
                        "line": "    @RequestBody",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final CodeSystem codeSystem,",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 101,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/springside/springside4/commit/278d7463104e5e821e23de70d2cce67fb5b7bb0c?diff=split#diff-b3cfef43efdea7e1ae259e0b21929407L53",
                    "lines": [
                      {
                        "line": "@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT, consumes = \"application/json\")",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "@ResponseStatus(HttpStatus.NO_CONTENT)",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void update(@RequestBody final Task task) {",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "public void update(@RequestBody Task task) {",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "  taskManager.saveTask(task);",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/archine/tools/commit/111f8b70df3e0c78c019297d7c69ad8d648ca6a8?diff=split#diff-8b23a19bee48482f83c87f72a1322c4bL44",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "@RequestMapping(method = RequestMethod.POST)",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "@RequestMapping(method = RequestMethod.POST,consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "String postBody(URI uri, @RequestBody Object queryBody);",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**",
                        "lineNumber": 46,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "fix test for action api",
                  "changed endpoint to /payout, support multipart.",
                  "supporting JSON in the REST"
                ],
                "precision": "very-high",
                "repoDatasetSize": 368,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "java/TrustBoundaryViolation",
              "name": "TrustBoundaryViolation",
              "shortDescription": {
                "text": "Trust Boundary Violation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nGood application design includes defining trusted and untrusted areas. Trusted areas might include secure session information, while untrusted areas might include general website content such as a company logo. When this weakness is present, the application allows untrusted data-such as unsanitized user input-to be moved into trusted areas, generally data structures. If this happens, the data is often inadvertently then treated as \"trusted\" by the server, allowing attackers to gain higher-level access, taking control of the application or leading to denial of service.\n\n### Best practices for prevention\n\n* In early application planning stages, incorporate secure design principles in consultation with application security professionals.\n* Sanitize and validate all user input, including data from cookies and HTTP headers-limiting input to expected values if possible-before transferring to a trusted data structure (Never pass user input directly to a trusted data structure.).\n* Use sanitization and validation methods built into your development environment if these are available rather than relying on DIY methods, which are more complex to implement and may not catch special cases or can break if the application is modified.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/OAuth-Apis/apis/commit/0a7301608cc377bc36922ae25f352ad7aab2cc05?diff=split#diff-e76222cf463c219da7ab44271ef36583L24",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletRequest httpServletRequest = (HttpServletRequest) request;",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletResponse httpResponse = (HttpServletResponse) response;",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "    httpServletRequest.getSession().setAttribute(POST_CAS_AUTHENTICATION_INFO, httpServletRequest.getRemoteUser());",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    CasUser casUser = new CasUser();",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String uid = httpServletRequest.getRemoteUser();",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "    casUser.setUid(uid);",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (admins.contains(uid)) {",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "        casUser.setAdmin(true);",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "    httpServletRequest.getSession().setAttribute(POST_CAS_AUTHENTICATION_INFO, casUser);",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String uri = (String) httpServletRequest.getSession().getAttribute(REDIRECT_URL);",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    httpResponse.sendRedirect(uri);",
                        "lineNumber": 41,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/NCIP/catissue-core/commit/a396754f0b45452079559ba517c824dc5179ac2b?diff=split#diff-c141ef2cd4e78ddc0295139e37574051L53",
                    "lines": [
                      {
                        "line": " * */",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "public ActionForward executeSecureAction(ActionMapping mapping, ActionForm form,",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletRequest request, HttpServletResponse response) throws Exception",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "  Validator validator = new Validator();",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "//For Pagenation\t",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "//Gets the session of this request.",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpSession session = request.getSession();",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String pageNumStr = request.getParameter(Constants.PAGE_NUMBER);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int pageNum = 0;",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if(!validator.isEmpty(pageNumStr))",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \tpageNum = Integer.parseInt(pageNumStr);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \tsession.setAttribute(Constants.PAGE_NUMBER,pageNumStr);",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \trequest.setAttribute(Constants.PAGE_NUMBER,pageNumStr);",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "//The start index in the list of users to be approved/rejected.",
                        "lineNumber": 68,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/handexing/geekHome/commit/480c34dc8e4c889fb75df481295943e0412795c6?diff=split#diff-e356bbe1a48e1105917313c37d5b1882L196",
                    "lines": [
                      {
                        "line": "@RequestMapping(\"getEmailCode\")",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @CrossOrigin",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public ExecuteResult<User> getEmailCode(@RequestBody User user , HttpServletRequest request) {",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "      final ExecuteResult<User> result = new ExecuteResult<>();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "          User u = userService.verifyByNameAndEmail(user);",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if(u.getId()!=null){",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "              String code = EmailUtils.sendEmail(u.getEmail()); //发送邮件验证",
                        "lineNumber": 200,
                        "lineChange": "removed"
                      },
                      {
                        "line": "              String code = EmailUtils.getCode(); ",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "              emailUtils.doTask(u.getEmail() , code); //异步发送",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "              result.setData(userService.verifyByNameAndEmail(user));",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "              result.setSuccess(true);",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //将验证码放于session中保存，存放之前先清除",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if(request.getSession().getAttribute(\"verifyCode\") != null)",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "              {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  request.getSession().removeAttribute(\"verifyCode\"); ",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "              request.getSession().setAttribute(\"verifyCode\", code);",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }else {",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "              result.setData(new User());",
                        "lineNumber": 213,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "* fix unit test",
                  "When a user logs in, change what is viewed.",
                  "Added OIDC WS login and unit test."
                ],
                "precision": "very-high",
                "repoDatasetSize": 94,
                "cwe": [
                  "CWE-501"
                ]
              }
            },
            {
              "id": "java/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n### Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/The1andONLYdave/fireinstaller/commit/fb7660b43da93c2a92ac9769da114a2f9dd65860?diff=split#diff-957e20ff003efa34011e317a1df33919L283",
                    "lines": [
                      {
                        "line": "  CharSequence buf = buildOutput();",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "fireip =",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "          ((EditText) findViewById(R.id.editText1)).getText().toString().trim();",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Log.d(\"Fireinstaller\",\"IP ausgelesen:\"+fireip);",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "Log.d(\"Fireinstaller2\", \"connecting adb to \"+fireip);",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "Process adb = null;",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "  adb = Runtime.getRuntime().exec(\"adb connect \"+fireip+\"\\n\");",
                        "lineNumber": 327,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  adb = Runtime.getRuntime().exec(\"sh\");",
                        "lineNumber": 343,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (IOException e1) {",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDataOutputStream outputStream = new DataOutputStream(adb.getOutputStream());",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 351,
                        "lineChange": "added"
                      },
                      {
                        "line": "  outputStream.writeBytes(\"/system/bin/adb\" +\" connect \"+fireip+\"\\n \");",
                        "lineNumber": 352,
                        "lineChange": "added"
                      },
                      {
                        "line": "  outputStream.flush();",
                        "lineNumber": 353,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Log.d(\"fireinstaller\", \"/system/bin/adb\" +\" connect \"+fireip+\"\\n \");",
                        "lineNumber": 354,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (IOException e1) {",
                        "lineNumber": 355,
                        "lineChange": "added"
                      },
                      {
                        "line": "  // TODO Auto-generated catch block",
                        "lineNumber": 356,
                        "lineChange": "added"
                      },
                      {
                        "line": "          public String PushApk(String data) throws IOException   {",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "              ",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Log.d(\"Fireinstaller\", \"pushing to device \"+fireip);",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "//TODO pushing to firetv",
                        "lineNumber": 517,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/GreenButtonAlliance/OpenESPI-ThirdParty-java/commit/35a9bf9a5fd15f40ea46e7ee999dcba1cf57de1c?diff=split#diff-1981a4f6c48e4ff546f7b00a26069861L70",
                    "lines": [
                      {
                        "line": "@ResponseBody",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void doCommand(HttpServletResponse response,",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @RequestParam Map<String, String> params, InputStream stream)",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws IOException {",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String command = params.get(\"command\");",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      System.out.println(\"[Manage] \" + command);",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      String commandString = params.get(\"command\");",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "      System.out.println(\"[Manage] \" + commandString);",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "      ServletOutputStream output = response.getOutputStream();",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "      ",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "      output.println(\"[Manage] Restricted Management Interface\");",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "      output.println(\"[Manage] Request: \" + command);",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      Process p = Runtime.getRuntime().exec(command);",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      p.waitFor();",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      output.println(\"[Manage] Result: \");",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      output.println(\"[Manage] Request: \" + commandString);",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "String command=null;",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "if(command != null) {",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Process p = Runtime.getRuntime().exec(command);",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "  p.waitFor();",
                        "lineNumber": 93,
                        "lineChange": "added"
                      },
                      {
                        "line": "  output.println(\"[Manage] Result: \");",
                        "lineNumber": 94,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/GreenButtonAlliance/OpenESPI-DataCustodian-java/commit/3e1b42ba4df357aa07b2eb0a1141aad4664a7959?diff=split#diff-8ee7af8e5dde501c93df6605af6e1a33L68",
                    "lines": [
                      {
                        "line": "@ResponseBody",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void doCommand(HttpServletResponse response,",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @RequestParam Map<String, String> params, InputStream stream)",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws IOException {",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String command = params.get(\"command\");",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      System.out.println(\"[Manage] \" + command);",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      String commandString = params.get(\"command\");",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "      System.out.println(\"[Manage] \" + commandString);",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "      ServletOutputStream output = response.getOutputStream();",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "      ",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "      output.println(\"[Manage] Restricted Management Interface\");",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "      output.println(\"[Manage] Request: \" + command);",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      Process p = Runtime.getRuntime().exec(command);",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      p.waitFor();",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      output.println(\"[Manage] Result: \");",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      output.println(\"[Manage] Request: \" + commandString);",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "String command=null;",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "if(command != null) {",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Process p = Runtime.getRuntime().exec(command);",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "  p.waitFor();",
                        "lineNumber": 93,
                        "lineChange": "added"
                      },
                      {
                        "line": "  output.println(\"[Manage] Result: \");",
                        "lineNumber": 94,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Changed tracevis-server version to 2.0.0-SNAPSHOT",
                  "Replace shelling out to chmod with reflection to use android.os.FileUtils.",
                  "Subscription/Usagepoint;"
                ],
                "precision": "very-high",
                "repoDatasetSize": 16,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "javascript/DOMXSS",
              "name": "DOMXSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/jbt/markdown-editor/commit/4c02744b8a51de4a23002a7064e3d5a9a712f78c?diff=split#diff-0eb547304658805aad788d320f10bf1f292797b5e6d745a3bf617584da017051L187",
                    "lines": [
                      {
                        "line": "  document.getElementById('out').innerHTML = marked(val);",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "var editor = CodeMirror.fromTextArea(document.getElementById('code'), {",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "  mode: 'gfm',",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  lineNumbers: true,",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "  matchBrackets: true,",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  lineWrapping: true,",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  theme: 'default',",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  onChange: update",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "document.addEventListener('drop', function(e){",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "  e.preventDefault();",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  e.stopPropagation();",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var theFile = e.dataTransfer.files[0];",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var theReader = new FileReader();",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  theReader.onload = function(e){",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    editor.setValue(e.target.result);",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  };",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "  theReader.readAsText(theFile);",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "}, false);",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "function save(){",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var code = editor.getValue();",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var blob = new Blob([code], { type: 'text/plain' });",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "  saveBlob(blob);",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "function saveBlob(blob){",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var name = \"untitled.md\";",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if(window.saveAs){",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "    window.saveAs(blob, name);",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }else if(navigator.saveBlob){",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    navigator.saveBlob(blob, name);",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }else{",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    url = URL.createObjectURL(blob);",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var link = document.createElement(\"a\");",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    link.setAttribute(\"href\",url);",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    link.setAttribute(\"download\",name);",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var event = document.createEvent('MouseEvents');",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "    event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "    link.dispatchEvent(event);",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "document.addEventListener('keydown', function(e){",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if(e.keyCode == 83 && (e.ctrlKey || e.metaKey)){",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    e.preventDefault();",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "    save();",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "})",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "var hashto;",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "function updateHash(){",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "  window.location.hash = btoa(RawDeflate.deflate(editor.getValue()));",
                        "lineNumber": 245,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  window.location.hash = btoa(RawDeflate.deflate(unescape(encodeURIComponent(editor.getValue()))))",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "if(window.location.hash){",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var h = window.location.hash.replace(/^#/, '');",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if(h.slice(0,5) == 'view:'){",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "    setOutput(RawDeflate.inflate(atob(h.slice(5))));",
                        "lineNumber": 251,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    setOutput(decodeURIComponent(escape(RawDeflate.inflate(atob(h.slice(5))))));",
                        "lineNumber": 251,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/RasPlex/OpenPHT/commit/ea03c88ab96c2607d7fc7bdb04bed16a2c14afa5?diff=split#diff-cbc600141d5846348060616895d0adbb51a9720d9504a4d7d33cd5eb65e44d4bL57",
                    "lines": [
                      {
                        "line": "document.write('<img src=\"' + thumbnail + '\" class=\"cover\"></img>');",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var imgSrc = item[\"thumbnail\"] ? ('vfs/' + escape(item[\"thumbnail\"])) : \"images/DefaultVideo.png\";",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "document.write('<img src=\"' + imgSrc + '\" class=\"cover\"></img>');",
                        "lineNumber": 54,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/RasPlex/OpenPHT/commit/ea03c88ab96c2607d7fc7bdb04bed16a2c14afa5?diff=split#diff-07d3f208648c3e9987149a3900a8c9f269a0edd8ad11f1f0be50ad475bb36320L60",
                    "lines": [
                      {
                        "line": "if (array[activeItem][\"thumbnail\"])",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  document.write('<img src=\"thumb/' + array[activeItem][\"thumbnail\"] + '.jpg\"></img>\"');",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": " else",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   document.write('<img src=\"images/DefaultAlbumCover.png\"></img>');",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": " var imgSrc = array[activeItem][\"thumbnail\"] ? ('vfs/' + escape(array[activeItem][\"thumbnail\"])) : \"images/DefaultAlbumCover.png\";",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": " document.write('<img src=\"' + imgSrc + '\"></img>');",
                        "lineNumber": 60,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Add unit test.",
                  "e3db0cd CHANGES.md\n84d1acf Add tests.",
                  "Update and clean up the tests by using the iframe's load event."
                ],
                "precision": "very-high",
                "repoDatasetSize": 1490,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "java/InsecureCipherNoIntegrity",
              "name": "InsecureCipherNoIntegrity",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/terracotta-bank/terracotta-bank/commit/a27453b52859d32ef25694869c1662a9493c621c?diff=split#diff-49444057459eecb4ff09662c3beab114L95",
                    "lines": [
                      {
                        "line": "String ivHeader = request.getHeader(\"X-Encryption-Iv\");",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] iv = Base64.getDecoder().decode(ivHeader);",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 94,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cipher.init(Cipher.DECRYPT_MODE, secretKey(), new IvParameterSpec(iv));",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");",
                        "lineNumber": 95,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.init(Cipher.DECRYPT_MODE, secretKey(), new GCMParameterSpec(128, iv));",
                        "lineNumber": 96,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.updateAAD(version.getBytes(UTF_8));",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "InputStream plain = new CipherInputStream(new Base64InputStream(request.getInputStream()), cipher);",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn new DecryptedWrapper(request, plain);",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/oracle/helidon/commit/bd7b527d900fc3c7c5204459f9bf6dabb5de9f3f?diff=split#diff-5ab21f1b0b5ca2653372fd39b4aa40b0L64",
                    "lines": [
                      {
                        "line": "KeySpec keySpec = new PBEKeySpec(masterPassword, salt, 10000, 128);",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "KeySpec keySpec = new PBEKeySpec(masterPassword, salt, 10000, 256);",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecretKeySpec spec = new SecretKeySpec(secretKeyFactory.generateSecret(keySpec).getEncoded(), \"AES\");",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cipher.init(cipherMode, spec, new IvParameterSpec(salt));",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.init(cipherMode, spec, new GCMParameterSpec(128, nonce));",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": " return cipher;",
                        "lineNumber": 66,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Esri/mapbook-android/commit/29dbb58917955ca69632a80cc189247f6398fdbb?diff=split#diff-9865f4effc693075a16c0a2b0657d46eL84",
                    "lines": [
                      {
                        "line": "public class CredentialCryptographer {",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = CredentialCryptographer.class.getSimpleName();",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String CIPHER_TYPE = \"AES/GCM/NoPadding\";",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String RSA_MODE =  \"RSA/ECB/PKCS1Padding\";",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AES_MODE = \"AES/ECB/PKCS7Padding\";",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AndroidKeyStore = \"AndroidKeyStore\";",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String ALIAS = \"CRED_KEY\";",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "final SecretKey key = (SecretKey) keyStore.getKey(ALIAS, null);",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cipher c = Cipher.getInstance(CIPHER_TYPE);",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "final File file = new File(getFilePath(encryptedDataFileName));",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte [] decodedBytes = null;",
                        "lineNumber": 473,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try{",
                        "lineNumber": 474,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final Cipher c = Cipher.getInstance(AES_MODE, \"BC\");",
                        "lineNumber": 475,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  c.init(Cipher.DECRYPT_MODE, getSecretKey(context));",
                        "lineNumber": 476,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  decodedBytes = c.doFinal(encrypted);",
                        "lineNumber": 477,
                        "lineChange": "removed"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "added versioning and included salt in encrypted byte stream.",
                  "Switch from CBC to GCM"
                ],
                "precision": "very-high",
                "repoDatasetSize": 54,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "java/InsecureDefaultAesCipher",
              "name": "InsecureDefaultAesCipher",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Esri/mapbook-android/commit/29dbb58917955ca69632a80cc189247f6398fdbb?diff=split#diff-9865f4effc693075a16c0a2b0657d46eL84",
                    "lines": [
                      {
                        "line": "public class CredentialCryptographer {",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = CredentialCryptographer.class.getSimpleName();",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String CIPHER_TYPE = \"AES/GCM/NoPadding\";",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String RSA_MODE =  \"RSA/ECB/PKCS1Padding\";",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AES_MODE = \"AES/ECB/PKCS7Padding\";",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AndroidKeyStore = \"AndroidKeyStore\";",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String ALIAS = \"CRED_KEY\";",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "final SecretKey key = (SecretKey) keyStore.getKey(ALIAS, null);",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cipher c = Cipher.getInstance(CIPHER_TYPE);",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "final File file = new File(getFilePath(encryptedDataFileName));",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte [] decodedBytes = null;",
                        "lineNumber": 473,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try{",
                        "lineNumber": 474,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final Cipher c = Cipher.getInstance(AES_MODE, \"BC\");",
                        "lineNumber": 475,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  c.init(Cipher.DECRYPT_MODE, getSecretKey(context));",
                        "lineNumber": 476,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  decodedBytes = c.doFinal(encrypted);",
                        "lineNumber": 477,
                        "lineChange": "removed"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jenkinsci/jenkins/commit/1ac357c2ea2cac85acc222aa5feb9a25c6b4346e?diff=split#diff-3f1937871076df5e4440785f2ac5ddd6L120",
                    "lines": [
                      {
                        "line": "String base64 = req.getHeader(\"X-ConsoleAnnotator\");",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (base64!=null) {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cipher sym = Cipher.getInstance(\"AES\");",
                        "lineNumber": 119,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Cipher sym = Secret.getCipher(\"AES\");",
                        "lineNumber": 117,
                        "lineChange": "added"
                      },
                      {
                        "line": "    sym.init(Cipher.DECRYPT_MODE, Hudson.getInstance().getSecretKeyAsAES128());",
                        "lineNumber": 120,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tasos-py/AES-Encryption-Classes/commit/b11039b5febf20bbe854fc6bb1d401191a4ee29f?diff=split#diff-bfedf423ceee7772f0ec16aa9392fa8dL310",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 307,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private Cipher cipher(int cipherMode, byte[] key, byte[] iv) {",
                        "lineNumber": 308,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");",
                        "lineNumber": 309,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  IvParameterSpec ivSpec = new IvParameterSpec(iv);",
                        "lineNumber": 310,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 311,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   */ ",
                        "lineNumber": 293,
                        "lineChange": "added"
                      },
                      {
                        "line": "  private Cipher cipher(int cipherMode, byte[] key, byte[] iv) {",
                        "lineNumber": 294,
                        "lineChange": "added"
                      },
                      {
                        "line": "      SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");",
                        "lineNumber": 295,
                        "lineChange": "added"
                      },
                      {
                        "line": "      IvParameterSpec ivSpec = new IvParameterSpec(iv);",
                        "lineNumber": 296,
                        "lineChange": "added"
                      },
                      {
                        "line": "      try {",
                        "lineNumber": 297,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Made changes to support CBC mode encryption",
                  "added all sha and AES tests"
                ],
                "precision": "very-high",
                "repoDatasetSize": 53,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "java/HttpResponseSplitting",
              "name": "HttpResponseSplitting",
              "shortDescription": {
                "text": "Improper Neutralization of CRLF Sequences in HTTP Headers"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCRLF is an abbreviation for the terms \"carriage return\" and \"line feed.\" These two special characters are a legacy of old-fashioned printing terminals used in the early days of computing. However, today both are still often used as delimiters between data. When this weakness exists, CR and LF characters (represented respectively in code as `\\r` and `\\n`) are permitted to be present in HTTP headers, usually due to poor planning for data handling during development.\n\nCRLF sequences in HTTP headers are known as \"response splitting\" because these characters effectively split the response from the browser, causing the single line to be accepted as multiple lines by the server (for example, the single line First Line\\r\\nSecond Line would be accepted by the server as two lines of input).\n\nWhile response splitting in itself is not an attack, and can be completely harmless unless exploited, its presence could lead to an injection attack (known as CRLF injection) and a variety of unpredictable and potentially dangerous behavior. This weakness can be exploited in a number of ways, such as page hijacking or cross-user defacement, in which an attacker displays false site content and/or captures confidential information such as credentials. It can even lead to cross-site scripting attacks, in which attackers can cause malicious code to execute in the user's browser.\n\nFor example, the following code is vulnerable:\n\n```\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) {\n  Cookie cookie = new Cookie(\"name\", request.getParameter(\"name\"));\n  response.addCookie(cookie);\n}\n```\n\nbecause the user may provide a name parameter with a value like `XYZ\\r\\nHTTP/1.1 200 OK\\nATTACKER CONTROLLED`. In this case, they will produce a second HTTP response:\n\n```\nHTTP/1.1 200 OK\nATTACKER CONTROLLED\n```\n\nA possible fix is to remove all non-alphanumerical characters:\n\n```\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) {\n  String name = request.getParameter(\"name\")\n      .replaceAll(\"[^a-zA-Z ]\", \"\");\n  Cookie cookie = new Cookie(\"name\", name);\n  response.addCookie(cookie);\n}\n```\n\nIn this case, the attacker would be unable to produce a second HTTP response.\n\n\n### Best practices for prevention\n* Assume all input is potentially malicious. Define acceptable responses wherever possible, and if not possible, encode CR and LF characters to prevent header splitting.\n* Replace both `\\r` (carriage return) and `\\n` (line feed) with \"\" (empty string)-many platforms handle these characters interchangeably so the weakness may still exist if one of the two is permitted.\nFollow best practices and strip all other special characters (\", /, \\, ;, etc., as well as spaces) wherever possible.\nBe sure to sanitize special characters in both directions-from the browser to the server and also in data sent back to the browser.\nIdeally, adopt current development resources, such as languages and libraries, that block CR and LF injection in headers.\nBe vigilant with all input types that could potentially be tampered with or modified at the user end (intentionally or unintentionally), which could lead to injection attacks. These include GET, POST, cookies, and other HTTP headers.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/gzsll/TLint/commit/26407f9d7fc2fcc917cca4228addd34d7b7a0339?diff=split#diff-ee1b33b10d96e72dd93d67632f828d50L34",
                    "lines": [
                      {
                        "line": "Request original = chain.request();",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!TextUtils.isEmpty(mUserStorage.getCookie())) {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Request request = original.newBuilder().addHeader(\"Cookie\", \"u=\" + mUserStorage.getCookie() + \";\").build();",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Request request = original.newBuilder().addHeader(\"Cookie\", \"u=\" + URLEncoder.encode(mUserStorage.getCookie()) + \";\").build();",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return chain.proceed(request);",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 36,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/http-builder-ng/http-builder-ng/commit/d533d480a249d279d5d281c07304150e300ce4ce?diff=split#diff-6becea663e2a2b1de3ad29a739f25bb5L260",
                    "lines": [
                      {
                        "line": "//technically cookies are headers, so add them here",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "List<Cookie> cookies = e.cookies(new ArrayList());",
                        "lineNumber": 259,
                        "lineChange": "removed"
                      },
                      {
                        "line": "List<Cookie> cookies = cr.actualCookies(new ArrayList());",
                        "lineNumber": 259,
                        "lineChange": "added"
                      },
                      {
                        "line": "for(Cookie cookie : cookies) {",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookieStore.addCookie(cookie);",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 262,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/commons-vfs/commit/e07f9edd339973fb532ecfa88928884c75794957?diff=split#diff-c81d6f105c7fe7ff1f4734a6c1a3cbf6L344",
                    "lines": [
                      {
                        "line": "    final FileSystemOptions fileSystemOptions) {",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "final CookieStore cookieStore = new BasicCookieStore();",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cookie[] cookies = builder.getCookies(fileSystemOptions);",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (cookies != null) {",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (Cookie cookie : cookies) {",
                        "lineNumber": 346,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    for (final Cookie cookie : cookies) {",
                        "lineNumber": 346,
                        "lineChange": "added"
                      },
                      {
                        "line": "        cookieStore.addCookie(cookie);",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 349,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Support HTTP Range requests for resuming interrupted file downloads.",
                  "* integration test server post response and logging",
                  "Added usage of java Cookies and other changes"
                ],
                "precision": "very-high",
                "repoDatasetSize": 232,
                "cwe": [
                  "CWE-113"
                ]
              }
            },
            {
              "id": "java/InsecureSecret",
              "name": "InsecureSecret",
              "shortDescription": {
                "text": "Use of Insufficiently Random Values"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nComputer security relies on random numbers for many things: generating secure, confidential session keys; hashing password data; encryption for transmitting sensitive data, and more. It's easy to understand why. If session keys, for example, were generated sequentially, attackers would be able to guess these easily and then hijack legitimate user sessions. Similarly, if encryption techniques used easy-to-guess numbers, attackers could use brute-force attacks to gain unauthorized access.\n\nIn reality, since computers cannot generate truly random numbers, they use \"pseudorandom\" numbers instead, generated using an algorithm that is \"seeded\" in a variety of ways to produce highly variable values in a random-seeming order, making them very hard-in theory-for attackers to guess. However, if developers inadvertently make use of a weak random algorithm, attackers may be able to discover the algorithm, seed, or pattern, ultimately unlocking access to commands or sensitive data, which can then be held for ransom or sold.\n\n### Best practices for prevention\n* Avoid using weak pseudorandom number generators (PRNGs), such as statistical PRNGs. Instead, choose a cryptographically secure PRNG.\n* Avoid using predictable seed values, such as user ID or server start time. Instead, use a seed that is itself pseudorandom, such as one taken from an external hardware source.\n* Use standard, accepted security algorithms and libraries rather than taking a DIY approach and creating custom code that may contain inherent weaknesses or overlook critical flaws.\n* Use static analysis tools to identify potential instances of this weakness in code and then ensure good test coverage with appropriate white-box testing.\n* Educate developers about the importance of entropy in security systems development, and consider adopting tools that are FIPS 140-2 compliant.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/iamMehedi/Secured-Preference-Store/commit/7a497d4dfff92ecab67c5a2f9bb16360da08d913?diff=split#diff-91bd8c6e8f1edb78f742519c90d26d7dL93",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "public byte[] encrypt(byte[] bytes, byte[] IV) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, BadPaddingException, NoSuchProviderException, IllegalBlock",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (bytes != null && bytes.length > 0) {",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M || isCompatMode)",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return encryptAESCompat(bytes, IV);",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else return encryptAES(bytes, IV);",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "public String encrypt(String text) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IOException, IllegalBlockSizeException, InvalidAlgorithmParameterException, NoSuchProviderException, BadPaddingException {",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (text != null && text.length() > 0) {",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        byte[] IV = getIV();",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "       byte[] encrypted = encrypt(text.getBytes(DEFAULT_CHARSET), IV);",
                        "lineNumber": 115,
                        "lineChange": "added"
                      },
                      {
                        "line": "       return base64Encode(IV) + DELIMITER + base64Encode(encrypted);",
                        "lineNumber": 116,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] getIV() throws UnsupportedEncodingException {",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] iv = new byte[16];",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Random rng = new Random();",
                        "lineNumber": 159,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    SecureRandom rng = new SecureRandom();",
                        "lineNumber": 167,
                        "lineChange": "added"
                      },
                      {
                        "line": "    rng.nextBytes(iv);",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return iv;",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] encryptAESCompat(byte[] bytes, byte[] IV) throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, BadPaddingException, IllegalBlockSizeExcepti",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cipher c = Cipher.getInstance(AES_CIPHER_COMPAT, BOUNCY_CASTLE_PROVIDER);",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    c.init(Cipher.ENCRYPT_MODE, aesKey, new IvParameterSpec(IV));",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return c.doFinal(bytes);",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 190,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/aionnetwork/aion/commit/8ac04002e9bfc2ba8b92d54c84de0e5a0d9e350e?diff=split#diff-8154a85bffdd93bc7de0a1a97da8a873L70",
                    "lines": [
                      {
                        "line": "// 128-bit initialisation vector for the cipher (16 bytes)",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] iv = generateRandomBytes(16);",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] privateKey = key.getPrivKeyBytes();",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] encryptKey = Arrays.copyOfRange(derivedKey, 0, 16);",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] cipherText = encryptAes(iv, encryptKey, privateKey);",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] mac = HashUtil.h256(concat(Arrays.copyOfRange(derivedKey, 16, 32), cipherText));",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "private byte[] generateRandomBytes(int size) {",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final byte[] bytes = new byte[size];",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Random random = new Random();",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Random random = new SecureRandom();",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "    random.nextBytes(bytes);",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return bytes;",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "private byte[] encryptAes(byte[] iv, byte[] keyBytes, byte[] cipherText)",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InvalidKeyException, BadPaddingException, IllegalBlockSizeException {",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return processAes(iv, keyBytes, cipherText, Cipher.ENCRYPT_MODE);",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static byte[] processAes(byte[] iv, byte[] keyBytes, byte[] cipherText, int encryptMode)",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    IvParameterSpec ivSpec = new IvParameterSpec(iv);",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Mode",
                        "lineNumber": 155,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/aionnetwork/aion_api/commit/6e5dae82db3a09ec6f0d793db4786a2d1bc82378?diff=split#diff-c1d459d663c64f4742ed5553a8f32a0bL63",
                    "lines": [
                      {
                        "line": "// 128-bit initialisation vector for the cipher (16 bytes)",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] iv = generateRandomBytes(16);",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] privateKey = key.getPrivKeyBytes();",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] encryptKey = Arrays.copyOfRange(derivedKey, 0, 16);",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] cipherText = encryptAes(iv, encryptKey, privateKey);",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "final byte[] mac = HashUtil.h256(concat(Arrays.copyOfRange(derivedKey, 16, 32), cipherText));",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final byte[] mac = HashUtil",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .h256(concat(Arrays.copyOfRange(derivedKey, 16, 32), cipherText));",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "private byte[] generateRandomBytes(int size) {",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final byte[] bytes = new byte[size];",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Random random = new Random();",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Random random = new SecureRandom();",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "    random.nextBytes(bytes);",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return bytes;",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "private byte[] encryptAes(byte[] iv, byte[] keyBytes, byte[] cipherText)",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,",
                        "lineNumber": 136,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        InvalidKeyException, BadPaddingException, IllegalBlockSizeException {",
                        "lineNumber": 137,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,",
                        "lineNumber": 144,
                        "lineChange": "added"
                      },
                      {
                        "line": "    InvalidKeyException, BadPaddingException, IllegalBlockSizeException {",
                        "lineNumber": 145,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return processAes(iv, keyBytes, cipherText, Cipher.ENCRYPT_MODE);",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static byte[] processAes(byte[] iv, byte[] keyBytes, byte[] cipherText, int encryptMode)",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,",
                        "lineNumber": 142,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,",
                        "lineNumber": 150,
                        "lineChange": "added"
                      },
                      {
                        "line": "    InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {",
                        "lineNumber": 151,
                        "lineChange": "added"
                      },
                      {
                        "line": "    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    IvParameterSpec ivSpec = new IvParameterSpec(iv);",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Mode",
                        "lineNumber": 155,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Random string generation should use SecureRandom w/ Base64 encoding ()",
                  "* fix random strings"
                ],
                "precision": "very-high",
                "repoDatasetSize": 52,
                "cwe": [
                  "CWE-330"
                ]
              }
            },
            {
              "id": "java/LdapInjection",
              "name": "LdapInjection",
              "shortDescription": {
                "text": "LDAP Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nLDAP servers offer simple storage for a range of information types, including systems, services, emails, and users. One of the most common applications of LDAP servers is to orchestrate user sessions, making it easier for users to access multiple services through a single sign-on. An LDAP injection attack occurs when an attacker gains unauthorized access to these centralized stores of user data. If an attacker succeeds in injecting arbitrary, unsanitized information into an LDAP query, the attacker can gain access to credentials or content and/or perform unauthorized actions. This could include adding or modifying records within the centralized data store itself, such as erasing or altering records.\nAs with other injection-type attacks, like SQL injection, LDAP injection attacks are highly preventable through safer web application design and coding practices.\n\n### Best practices for prevention\n* Never pass user input directly to the LDAP query.\n* Sanitize all input prior to processing as appropriate for the particular input type.\n* Escape all LDAP specific characters, such as, `#,\",+, ;, <, >, \\` and null, replacing with ASCII hex values. However, do not rely solely on denylists or escaped characters for defense against LDAP injection attacks.\n* For tighter security, consider validating input against an allowlist (\"accept known good\") to ensure that only certain parameters can be passed.\n* Assume all user input is potentially malicious.\n* Adopt development frameworks that specifically provide protection against LDAP injection attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/prestosql/presto/commit/629cc84dcbcfa52fe20992028163ab092b3fb47e?diff=split#diff-8572d1a5d8ecdb804a066cc869842e48L126",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter)",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException, ServletException",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // skip auth for http",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!servletRequest.isSecure()) {",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "        nextFilter.doFilter(servletRequest, servletResponse);",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletRequest request = (HttpServletRequest) servletRequest;",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletResponse response = (HttpServletResponse) servletResponse;",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String header = request.getHeader(AUTHORIZATION);",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "        List<String> credentials = getCredentials(header);",
                        "lineNumber": 139,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Principal principal = authenticate(credentials.get(0), credentials.get(1));",
                        "lineNumber": 140,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Credentials credentials = getCredentials(header);",
                        "lineNumber": 159,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Principal principal = getPrincipal(credentials);",
                        "lineNumber": 160,
                        "lineChange": "added"
                      },
                      {
                        "line": "        // ldap authentication ok, continue",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static List<String> getCredentials(String header)",
                        "lineNumber": 167,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private static Credentials getCredentials(String header)",
                        "lineNumber": 200,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (header == null) {",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(UNAUTHORIZED, \"Unauthorized\");",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!header.startsWith(BASIC_AUTHENTICATION_PREFIX)) {",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(BAD_REQUEST, \"Basic authentication is expected\");",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String base64EncodedCredentials = header.substring(BASIC_AUTHENTICATION_PREFIX.length());",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String credentials = decodeCredentials(base64EncodedCredentials);",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "    List<String> parts = Splitter.on(':').limit(2).splitToList(credentials);",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (parts.size() != 2 || parts.stream().anyMatch(String::isEmpty)) {",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(BAD_REQUEST, \"Malformed decoded credentials\");",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return parts;",
                        "lineNumber": 182,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return new Credentials(parts.get(0), parts.get(1));",
                        "lineNumber": 215,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static String decodeCredentials(String base64EncodedCredentials)",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] bytes;",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "        bytes = Base64.getDecoder().decode(base64EncodedCredentials);",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "    catch (IllegalArgumentException e) {",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(BAD_REQUEST, \"Invalid base64 encoded credentials\");",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(bytes, UTF_8);",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Principal authenticate(String user, String password)",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Map<String, String> environment = createEnvironment(user, password);",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "    InitialDirContext context = null;",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "        context = createDirContext(environment);",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "        checkForGroupMembership(user, context);",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log.debug(\"Authentication successful for user %s\", user);",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Map<String, String> createEnvironment(String user, String password)",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ImmutableMap.<String, String>builder()",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .putAll(basicEnvironment)",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .put(SECURITY_AUTHENTICATION, \"simple\")",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .put(SECURITY_PRINCIPAL, createPrincipal(user))",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .put(SECURITY_CREDENTIALS, password)",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .build();",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String createPrincipal(String user)",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return replaceUser(userBindSearchPattern, user);",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String replaceUser(String pattern, String user)",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return pattern.replaceAll(\"\\\\$\\\\{USER\\\\}\", user);",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void checkForGroupMembership(String user, DirContext context)",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "String searchFilter = replaceUser(groupAuthorizationSearchPattern.get(), user);",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "SearchControls searchControls = new SearchControls();",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "NamingEnumeration<SearchResult> search = null;",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "    search = context.search(userBaseDistinguishedName.get(), searchFilter, searchControls);",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "    authorized = search.hasMoreElements();",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 293,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/tomcat/commit/527baba1736d3111596fb19dba367460fdb2808c?diff=split#diff-29108cbea09c507a81a1fba2d274bdb8L233",
                    "lines": [
                      {
                        "line": " * the lock-null resource.",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "private final Hashtable<String,Vector<String>> lockNullResources =",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Hashtable<>();",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void service(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final String path = getRelativePath(req);",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Block access to special subdirectories.",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "// WebdavServlet remounts the webapp under a new path, so this check is",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "// necessary on all methods (including GET).",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isSpecialPath(path)) {",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_NOT_FOUND);",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "final String method = req.getMethod();",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (debug > 0) {",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log(\"[\" + method + \"] \" + path);",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (method.equals(METHOD_PROPFIND)) {",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doPropfind(req, resp);",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_PROPPATCH)) {",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doProppatch(req, resp);",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_MKCOL)) {",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doMkcol(req, resp);",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_COPY)) {",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doCopy(req, resp);",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_MOVE)) {",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doMove(req, resp);",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_LOCK)) {",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doLock(req, resp);",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_UNLOCK)) {",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doUnlock(req, resp);",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // DefaultServlet processing",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @return <code>true</code> if the resource specified is under a special path",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "private final boolean isSpecialPath(final String path) {",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !allowSpecialPaths && (",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "            path.toUpperCase(Locale.ENGLISH).startsWith(\"/WEB-INF\") ||",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "            path.toUpperCase(Locale.ENGLISH).startsWith(\"/META-INF\"));",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected String getRelativePath(HttpServletRequest request) {",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Are we being processed by a RequestDispatcher.include()?",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (request.getAttribute(",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "            RequestDispatcher.INCLUDE_REQUEST_URI) != null) {",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String result = (String) request.getAttribute(",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "                RequestDispatcher.INCLUDE_PATH_INFO);",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if ((result == null) || (result.equals(\"\")))",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "            result = \"/\";",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return (result);",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // No, extract the desired path directly from the request",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String result = request.getPathInfo();",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((result == null) || (result.equals(\"\"))) {",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "        result = \"/\";",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return (result);",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doOptions(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "     resp.addHeader(\"DAV\", \"1,2\");",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(resources,",
                        "lineNumber": 467,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                                          req);",
                        "lineNumber": 468,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(req);",
                        "lineNumber": 443,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.addHeader(\"Allow\", methodsAllowed.toString());",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": " * PROPFIND Method.",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doPropfind(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "     if (!listings) {",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Get allowed methods",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "        StringBuilder methodsAllowed = determineMethodsAllowed(resources,",
                        "lineNumber": 484,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                                              req);",
                        "lineNumber": 485,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        StringBuilder methodsAllowed = determineMethodsAllowed(req);",
                        "lineNumber": 458,
                        "lineChange": "added"
                      },
                      {
                        "line": "        resp.addHeader(\"Allow\", methodsAllowed.toString());",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (path.endsWith(\"/\"))",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "    path = path.substring(0, path.length() - 1);",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Properties which are to be displayed.",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "int type = FIND_ALL_PROP;",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "String depthStr = req.getHeader(\"Depth\");",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (depthStr == null) {",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "Node propNode = null;",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (req.getContentLength() > 0) {",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "    DocumentBuilder documentBuilder = getDocumentBuilder();",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Document document = documentBuilder.parse",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (new InputSource(req.getInputStream()));",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Get the root element of the document",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 587,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 588,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 589,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 590,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 591,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 559,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 561,
                        "lineChange": "added"
                      },
                      {
                        "line": "    int slash = path.lastIndexOf('/');",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (slash != -1) {",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String parentPath = path.substring(0, slash);",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Vector<String> currentLockNullResources =",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "            lockNullResources.get(parentPath);",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (currentLockNullResources != null) {",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Enumeration<String> lockNullResourcesList =",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "                currentLockNullResources.elements();",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while (lockNullResourcesList.hasMoreElements()) {",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "                String lockNullPath =",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    lockNullResourcesList.nextElement();",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (lockNullPath.equals(path)) {",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    resp.setStatus(WebdavStatus.SC_MULTI_STATUS);",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    resp.setContentType(\"text/xml; charset=UTF-8\");",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"multistatus\", XMLWriter.OPENING);",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "parseLockNullProperties",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (req, generatedXML, lockNullPath, type,",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "     properties);",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"multistatus\",",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!exists) {",
                        "lineNumber": 625,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 595,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.sendError(HttpServletResponse.SC_NOT_FOUND, path);",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (depth == 0) {",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parseProperties(req, generatedXML, path, type,",
                        "lineNumber": 642,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    properties);",
                        "lineNumber": 643,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 644,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // The stack always contains the object of the current level",
                        "lineNumber": 645,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Stack<String> stack = new Stack<>();",
                        "lineNumber": 646,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stack.push(path);",
                        "lineNumber": 647,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Stack of the objects one level below",
                        "lineNumber": 649,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Stack<String> stackBelow = new Stack<>();",
                        "lineNumber": 650,
                        "lineChange": "none"
                      },
                      {
                        "line": "    while ((!stack.isEmpty()) && (depth >= 0)) {",
                        "lineNumber": 652,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String currentPath = stack.pop();",
                        "lineNumber": 654,
                        "lineChange": "none"
                      },
                      {
                        "line": "        parseProperties(req, generatedXML, currentPath,",
                        "lineNumber": 655,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        type, properties);",
                        "lineNumber": 656,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {",
                        "lineNumber": 658,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            object = resources.lookup(currentPath);",
                        "lineNumber": 659,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        } catch (NamingException e) {",
                        "lineNumber": 660,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            continue;",
                        "lineNumber": 661,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resource = resources.getResource(currentPath);",
                        "lineNumber": 628,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (resource.isDirectory() && (depth > 0)) {",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 666,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    NamingEnumeration<NameClassPair> enumeration =",
                        "lineNumber": 667,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resources.list(currentPath);",
                        "lineNumber": 668,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    while (enumeration.hasMoreElements()) {",
                        "lineNumber": 669,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        NameClassPair ncPair = enumeration.nextElement();",
                        "lineNumber": 670,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        String newPath = currentPath;",
                        "lineNumber": 671,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (!(newPath.endsWith(\"/\")))",
                        "lineNumber": 672,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String[] entries = resources.list(currentPath);",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (String entry : entries) {",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String newPath = currentPath;",
                        "lineNumber": 634,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!(newPath.endsWith(\"/\")))",
                        "lineNumber": 635,
                        "lineChange": "added"
                      },
                      {
                        "line": "            newPath += \"/\";",
                        "lineNumber": 673,
                        "lineChange": "none"
                      },
                      {
                        "line": "        newPath += ncPair.getName();",
                        "lineNumber": 674,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        stackBelow.push(newPath);",
                        "lineNumber": 675,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 676,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 677,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resp.sendError",
                        "lineNumber": 678,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (HttpServletResponse.SC_INTERNAL_SERVER_ERROR,",
                        "lineNumber": 679,
                        "lineChange": "removed"
                      },
                      {
                        "line": "         path);",
                        "lineNumber": 680,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 681,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    newPath += entry;",
                        "lineNumber": 637,
                        "lineChange": "added"
                      },
                      {
                        "line": "    stackBelow.push(newPath);",
                        "lineNumber": 638,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 682,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Displaying the lock-null resources present in that",
                        "lineNumber": 684,
                        "lineChange": "none"
                      },
                      {
                        "line": "// collection",
                        "lineNumber": 685,
                        "lineChange": "none"
                      },
                      {
                        "line": "String lockPath = currentPath;",
                        "lineNumber": 686,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lockPath.endsWith(\"/\"))",
                        "lineNumber": 687,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockPath =",
                        "lineNumber": 688,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockPath.substring(0, lockPath.length() - 1);",
                        "lineNumber": 689,
                        "lineChange": "none"
                      },
                      {
                        "line": "Vector<String> currentLockNullResources =",
                        "lineNumber": 690,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.get(lockPath);",
                        "lineNumber": 691,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (currentLockNullResources != null) {",
                        "lineNumber": 692,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<String> lockNullResourcesList =",
                        "lineNumber": 693,
                        "lineChange": "none"
                      },
                      {
                        "line": "        currentLockNullResources.elements();",
                        "lineNumber": 694,
                        "lineChange": "none"
                      },
                      {
                        "line": "    while (lockNullResourcesList.hasMoreElements()) {",
                        "lineNumber": 695,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String lockNullPath =",
                        "lineNumber": 696,
                        "lineChange": "none"
                      },
                      {
                        "line": "            lockNullResourcesList.nextElement();",
                        "lineNumber": 697,
                        "lineChange": "none"
                      },
                      {
                        "line": "        parseLockNullProperties",
                        "lineNumber": 698,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (req, generatedXML, lockNullPath, type,",
                        "lineNumber": 699,
                        "lineChange": "none"
                      },
                      {
                        "line": "             properties);",
                        "lineNumber": 700,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 701,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 704,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (stack.isEmpty()) {",
                        "lineNumber": 706,
                        "lineChange": "none"
                      },
                      {
                        "line": "    depth--;",
                        "lineNumber": 707,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stack = stackBelow;",
                        "lineNumber": 708,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stackBelow = new Stack<>();",
                        "lineNumber": 709,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 710,
                        "lineChange": "none"
                      },
                      {
                        "line": " * PROPPATCH Method.",
                        "lineNumber": 725,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 726,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doProppatch(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 727,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 728,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 733,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 735,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 736,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 737,
                        "lineChange": "none"
                      },
                      {
                        "line": " * MKCOL Method.",
                        "lineNumber": 746,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 747,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doMkcol(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 748,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 749,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 754,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 756,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 757,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 758,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 759,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 761,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean exists = true;",
                        "lineNumber": 763,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 764,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.lookup(path);",
                        "lineNumber": 765,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 766,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 767,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 720,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Can't create a collection if a resource already exists at the given",
                        "lineNumber": 770,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (exists) {",
                        "lineNumber": 772,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (resource.exists()) {",
                        "lineNumber": 724,
                        "lineChange": "added"
                      },
                      {
                        "line": "    // Get allowed methods",
                        "lineNumber": 773,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(resources,",
                        "lineNumber": 774,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                                          req);",
                        "lineNumber": 775,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(req);",
                        "lineNumber": 726,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.addHeader(\"Allow\", methodsAllowed.toString());",
                        "lineNumber": 777,
                        "lineChange": "none"
                      },
                      {
                        "line": " }",
                        "lineNumber": 797,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean result = true;",
                        "lineNumber": 799,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 800,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.createSubcontext(path);",
                        "lineNumber": 801,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 802,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    result = false;",
                        "lineNumber": 803,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (resources.mkdir(path)) {",
                        "lineNumber": 750,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.setStatus(WebdavStatus.SC_CREATED);",
                        "lineNumber": 811,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 812,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 813,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 754,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_CONFLICT,",
                        "lineNumber": 755,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 814,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 821,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 822,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doDelete(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 823,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 824,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 829,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isLocked(req)) {",
                        "lineNumber": 831,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 832,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 833,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 834,
                        "lineChange": "none"
                      },
                      {
                        "line": "    deleteResource(req, resp);",
                        "lineNumber": 836,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 838,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 849,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 850,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doPut(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 851,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 852,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isLocked(req)) {",
                        "lineNumber": 854,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 855,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 856,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 857,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super.doPut(req, resp);",
                        "lineNumber": 859,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 861,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 863,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 864,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 866,
                        "lineChange": "none"
                      },
                      {
                        "line": " * COPY Method.",
                        "lineNumber": 869,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 870,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doCopy(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 871,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 872,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 877,
                        "lineChange": "none"
                      },
                      {
                        "line": "    copyResource(req, resp);",
                        "lineNumber": 879,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 881,
                        "lineChange": "none"
                      },
                      {
                        "line": " * MOVE Method.",
                        "lineNumber": 885,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 886,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doMove(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 887,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 888,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 893,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 895,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 896,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 897,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 898,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 900,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (copyResource(req, resp)) {",
                        "lineNumber": 902,
                        "lineChange": "none"
                      },
                      {
                        "line": "    deleteResource(path, req, resp, false);",
                        "lineNumber": 903,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 904,
                        "lineChange": "none"
                      },
                      {
                        "line": " * LOCK Method.",
                        "lineNumber": 910,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 911,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doLock(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 912,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 913,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 918,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 920,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 921,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 922,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Parsing depth header",
                        "lineNumber": 929,
                        "lineChange": "none"
                      },
                      {
                        "line": "String depthStr = req.getHeader(\"Depth\");",
                        "lineNumber": 931,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (depthStr == null) {",
                        "lineNumber": 933,
                        "lineChange": "none"
                      },
                      {
                        "line": "int lockDuration = DEFAULT_TIMEOUT;",
                        "lineNumber": 945,
                        "lineChange": "none"
                      },
                      {
                        "line": "String lockDurationStr = req.getHeader(\"Timeout\");",
                        "lineNumber": 946,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lockDurationStr == null) {",
                        "lineNumber": 947,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockDuration = DEFAULT_TIMEOUT;",
                        "lineNumber": 948,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 985,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Document document = documentBuilder.parse(new InputSource",
                        "lineNumber": 986,
                        "lineChange": "none"
                      },
                      {
                        "line": "        (req.getInputStream()));",
                        "lineNumber": 987,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Get the root element of the document",
                        "lineNumber": 989,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1117,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 1119,
                        "lineChange": "none"
                      },
                      {
                        "line": "lock.path = path;",
                        "lineNumber": 1121,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 1124,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1125,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 1126,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1127,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1128,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 1066,
                        "lineChange": "added"
                      },
                      {
                        "line": "Enumeration<LockInfo> locksList = null;",
                        "lineNumber": 1131,
                        "lineChange": "none"
                      },
                      {
                        "line": "    continue;",
                        "lineNumber": 1157,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1158,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ( (currentLock.path.startsWith(lock.path)) &&",
                        "lineNumber": 1159,
                        "lineChange": "none"
                      },
                      {
                        "line": "     ((currentLock.isExclusive()) ||",
                        "lineNumber": 1160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      (lock.isExclusive())) ) {",
                        "lineNumber": 1161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    continue;",
                        "lineNumber": 1171,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1172,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ( (currentLock.path.startsWith(lock.path)) &&",
                        "lineNumber": 1173,
                        "lineChange": "none"
                      },
                      {
                        "line": "     ((currentLock.isExclusive()) ||",
                        "lineNumber": 1174,
                        "lineChange": "none"
                      },
                      {
                        "line": "      (lock.isExclusive())) ) {",
                        "lineNumber": 1175,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo currentLock = locksList.nextElement();",
                        "lineNumber": 1234,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (currentLock.path.equals(lock.path)) {",
                        "lineNumber": 1235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (currentLock.isExclusive()) {",
                        "lineNumber": 1237,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Retrieving an already existing lock on that resource",
                        "lineNumber": 1264,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo presentLock = resourceLocks.get(lock.path);",
                        "lineNumber": 1265,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (presentLock != null) {",
                        "lineNumber": 1266,
                        "lineChange": "none"
                      },
                      {
                        "line": "lock.tokens.addElement(lockToken);",
                        "lineNumber": 1280,
                        "lineChange": "none"
                      },
                      {
                        "line": "resourceLocks.put(lock.path, lock);",
                        "lineNumber": 1281,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Checking if a resource exists at this path",
                        "lineNumber": 1283,
                        "lineChange": "none"
                      },
                      {
                        "line": "exists = true;",
                        "lineNumber": 1284,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1285,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 1286,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1287,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1288,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    // \"Creating\" a lock-null resource",
                        "lineNumber": 1292,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int slash = lock.path.lastIndexOf('/');",
                        "lineNumber": 1293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String parentPath = lock.path.substring(0, slash);",
                        "lineNumber": 1294,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Vector<String> lockNulls =",
                        "lineNumber": 1296,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockNullResources.get(parentPath);",
                        "lineNumber": 1297,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (lockNulls == null) {",
                        "lineNumber": 1298,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockNulls = new Vector<>();",
                        "lineNumber": 1299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockNullResources.put(parentPath, lockNulls);",
                        "lineNumber": 1300,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1301,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNulls.addElement(lock.path);",
                        "lineNumber": 1303,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1305,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Checking resource locks",
                        "lineNumber": 1322,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo toRenew = resourceLocks.get(path);",
                        "lineNumber": 1324,
                        "lineChange": "none"
                      },
                      {
                        "line": "Enumeration<String> tokenList = null;",
                        "lineNumber": 1325,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (collectionLocksList.hasMoreElements()) {",
                        "lineNumber": 1343,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toRenew = collectionLocksList.nextElement();",
                        "lineNumber": 1344,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (path.equals(toRenew.path)) {",
                        "lineNumber": 1345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tokenList = toRenew.tokens.elements();",
                        "lineNumber": 1347,
                        "lineChange": "none"
                      },
                      {
                        "line": " * UNLOCK Method.",
                        "lineNumber": 1386,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1387,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doUnlock(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 1388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1389,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1394,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 1396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 1397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 1398,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1399,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 1401,
                        "lineChange": "none"
                      },
                      {
                        "line": "String lockTokenHeader = req.getHeader(\"Lock-Token\");",
                        "lineNumber": 1403,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Checking resource locks",
                        "lineNumber": 1407,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo lock = resourceLocks.get(path);",
                        "lineNumber": 1409,
                        "lineChange": "none"
                      },
                      {
                        "line": "Enumeration<String> tokenList = null;",
                        "lineNumber": 1410,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lock != null) {",
                        "lineNumber": 1411,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lock.tokens.isEmpty()) {",
                        "lineNumber": 1423,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resourceLocks.remove(path);",
                        "lineNumber": 1424,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 1425,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 1426,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1427,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (collectionLocksList.hasMoreElements()) {",
                        "lineNumber": 1434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lock = collectionLocksList.nextElement();",
                        "lineNumber": 1435,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (path.equals(lock.path)) {",
                        "lineNumber": 1436,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tokenList = lock.tokens.elements();",
                        "lineNumber": 1438,
                        "lineChange": "none"
                      },
                      {
                        "line": "    collectionLocks.removeElement(lock);",
                        "lineNumber": 1448,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 1449,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 1450,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1451,
                        "lineChange": "none"
                      },
                      {
                        "line": " * are present on the resource).",
                        "lineNumber": 1470,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1471,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean isLocked(HttpServletRequest req) {",
                        "lineNumber": 1472,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 1474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String ifHeader = req.getHeader(\"If\");",
                        "lineNumber": 1476,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockTokenHeader = \"\";",
                        "lineNumber": 1482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return isLocked(path, ifHeader + lockTokenHeader);",
                        "lineNumber": 1484,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1486,
                        "lineChange": "none"
                      },
                      {
                        "line": " * are present on the resource).",
                        "lineNumber": 1496,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1497,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean isLocked(String path, String ifHeader) {",
                        "lineNumber": 1498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Checking resource locks",
                        "lineNumber": 1500,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo lock = resourceLocks.get(path);",
                        "lineNumber": 1502,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<String> tokenList = null;",
                        "lineNumber": 1503,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((lock != null) && (lock.hasExpired())) {",
                        "lineNumber": 1504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resourceLocks.remove(path);",
                        "lineNumber": 1505,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (lock != null) {",
                        "lineNumber": 1506,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lock.hasExpired()) {",
                        "lineNumber": 1527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    collectionLocks.removeElement(lock);",
                        "lineNumber": 1528,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (path.startsWith(lock.path)) {",
                        "lineNumber": 1529,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tokenList = lock.tokens.elements();",
                        "lineNumber": 1531,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @return boolean true if the copy is successful",
                        "lineNumber": 1554,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1555,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean copyResource(HttpServletRequest req,",
                        "lineNumber": 1556,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             HttpServletResponse resp)",
                        "lineNumber": 1557,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1558,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Parsing destination header",
                        "lineNumber": 0002,
                        "lineChange": "none"
                      },
                      {
                        "line": "String destinationPath = req.getHeader(\"Destination\");",
                        "lineNumber": 1562,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (destinationPath == null) {",
                        "lineNumber": 1564,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_BAD_REQUEST);",
                        "lineNumber": 1565,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1566,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Remove url encoding from destination",
                        "lineNumber": 1569,
                        "lineChange": "none"
                      },
                      {
                        "line": "destinationPath = org.apache.catalina.util.RequestUtil.URLDecode(",
                        "lineNumber": 1570,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath, \"UTF8\");",
                        "lineNumber": 1571,
                        "lineChange": "none"
                      },
                      {
                        "line": "int protocolIndex = destinationPath.indexOf(\"://\");",
                        "lineNumber": 1573,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (protocolIndex >= 0) {",
                        "lineNumber": 1574,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // if the Destination URL contains the protocol, we can safely",
                        "lineNumber": 1575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // trim everything upto the first \"/\" character after \"://\"",
                        "lineNumber": 1576,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int firstSeparator =",
                        "lineNumber": 1577,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath.indexOf(\"/\", protocolIndex + 4);",
                        "lineNumber": 1578,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (firstSeparator < 0) {",
                        "lineNumber": 1579,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = \"/\";",
                        "lineNumber": 1580,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 1581,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath.substring(firstSeparator);",
                        "lineNumber": 1582,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1583,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 1584,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String hostName = req.getServerName();",
                        "lineNumber": 1585,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((hostName != null) && (destinationPath.startsWith(hostName))) {",
                        "lineNumber": 1586,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath.substring(hostName.length());",
                        "lineNumber": 1587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int portIndex = destinationPath.indexOf(\":\");",
                        "lineNumber": 1590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (portIndex >= 0) {",
                        "lineNumber": 1591,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath.substring(portIndex);",
                        "lineNumber": 1592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1593,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (destinationPath.startsWith(\":\")) {",
                        "lineNumber": 1595,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int firstSeparator = destinationPath.indexOf(\"/\");",
                        "lineNumber": 1596,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (firstSeparator < 0) {",
                        "lineNumber": 1597,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destinationPath = \"/\";",
                        "lineNumber": 1598,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {",
                        "lineNumber": 1599,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destinationPath =",
                        "lineNumber": 1600,
                        "lineChange": "none"
                      },
                      {
                        "line": "                destinationPath.substring(firstSeparator);",
                        "lineNumber": 1601,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1602,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1603,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Normalise destination path (remove '.' and '..')",
                        "lineNumber": 1606,
                        "lineChange": "none"
                      },
                      {
                        "line": "destinationPath = RequestUtil.normalize(destinationPath);",
                        "lineNumber": 1607,
                        "lineChange": "none"
                      },
                      {
                        "line": "String contextPath = req.getContextPath();",
                        "lineNumber": 1609,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ((contextPath != null) &&",
                        "lineNumber": 1610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (destinationPath.startsWith(contextPath))) {",
                        "lineNumber": 1611,
                        "lineChange": "none"
                      },
                      {
                        "line": "    destinationPath = destinationPath.substring(contextPath.length());",
                        "lineNumber": 1612,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1613,
                        "lineChange": "none"
                      },
                      {
                        "line": "String pathInfo = req.getPathInfo();",
                        "lineNumber": 1615,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (pathInfo != null) {",
                        "lineNumber": 1616,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String servletPath = req.getServletPath();",
                        "lineNumber": 1617,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((servletPath != null) &&",
                        "lineNumber": 1618,
                        "lineChange": "none"
                      },
                      {
                        "line": "        (destinationPath.startsWith(servletPath))) {",
                        "lineNumber": 1619,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath",
                        "lineNumber": 1620,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .substring(servletPath.length());",
                        "lineNumber": 1621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1622,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1623,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (debug > 0)",
                        "lineNumber": 1625,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log(\"Dest path :\" + destinationPath);",
                        "lineNumber": 1626,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Check destination path to protect special subdirectories",
                        "lineNumber": 1628,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isSpecialPath(destinationPath)) {",
                        "lineNumber": 1629,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_FORBIDDEN);",
                        "lineNumber": 1630,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1631,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1632,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 1634,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (destinationPath.equals(path)) {",
                        "lineNumber": 1636,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_FORBIDDEN);",
                        "lineNumber": 1637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1638,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean overwrite = true;",
                        "lineNumber": 1643,
                        "lineChange": "none"
                      },
                      {
                        "line": "String overwriteHeader = req.getHeader(\"Overwrite\");",
                        "lineNumber": 1644,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (overwriteHeader != null) {",
                        "lineNumber": 1646,
                        "lineChange": "none"
                      },
                      {
                        "line": " // Overwriting the destination",
                        "lineNumber": 1654,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean exists = true;",
                        "lineNumber": 1656,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1657,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.lookup(destinationPath);",
                        "lineNumber": 1658,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1659,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1660,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource destination = resources.getResource(destinationPath);",
                        "lineNumber": 1586,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (overwrite) {",
                        "lineNumber": 1663,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Delete destination resource, if it exists",
                        "lineNumber": 1665,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (exists) {",
                        "lineNumber": 1666,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (destination.exists()) {",
                        "lineNumber": 1590,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!deleteResource(destinationPath, req, resp, true)) {",
                        "lineNumber": 1667,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1668,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1669,
                        "lineChange": "none"
                      },
                      {
                        "line": " Hashtable<String,Integer> errorList = new Hashtable<>();",
                        "lineNumber": 1686,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean result = copyResource(resources, errorList,",
                        "lineNumber": 1688,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                              path, destinationPath);",
                        "lineNumber": 1689,
                        "lineChange": "removed"
                      },
                      {
                        "line": "boolean result = copyResource(errorList, path, destinationPath);",
                        "lineNumber": 1609,
                        "lineChange": "added"
                      },
                      {
                        "line": "if ((!result) || (!errorList.isEmpty())) {",
                        "lineNumber": 1691,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(errorList.elements().nextElement().intValue());",
                        "lineNumber": 1693,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 1694,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sendReport(req, resp, errorList);",
                        "lineNumber": 1695,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1696,
                        "lineChange": "none"
                      },
                      {
                        "line": "return false;",
                        "lineNumber": 1697,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Removing any lock-null resource which would be present at",
                        "lineNumber": 1707,
                        "lineChange": "none"
                      },
                      {
                        "line": "// the destination path",
                        "lineNumber": 1708,
                        "lineChange": "none"
                      },
                      {
                        "line": "lockNullResources.remove(destinationPath);",
                        "lineNumber": 1709,
                        "lineChange": "none"
                      },
                      {
                        "line": "return true;",
                        "lineNumber": 1711,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param dest Destination path",
                        "lineNumber": 1723,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1724,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean copyResource(DirContext dirContext,",
                        "lineNumber": 1725,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Hashtable<String,Integer> errorList, String source, String dest) {",
                        "lineNumber": 1726,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private boolean copyResource(Hashtable<String,Integer> errorList,",
                        "lineNumber": 1643,
                        "lineChange": "added"
                      },
                      {
                        "line": "        String source, String dest) {",
                        "lineNumber": 1644,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (debug > 1)",
                        "lineNumber": 1728,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log(\"Copy: \" + source + \" To: \" + dest);",
                        "lineNumber": 1729,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Object object = null;",
                        "lineNumber": 1731,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 1732,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        object = dirContext.lookup(source);",
                        "lineNumber": 1733,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1734,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        // Ignore",
                        "lineNumber": 1735,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1740,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    dirContext.createSubcontext(dest);",
                        "lineNumber": 1741,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1742,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put",
                        "lineNumber": 1743,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (dest, new Integer(WebdavStatus.SC_CONFLICT));",
                        "lineNumber": 1744,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1745,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1746,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1748,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    NamingEnumeration<NameClassPair> enumeration =",
                        "lineNumber": 1749,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        dirContext.list(source);",
                        "lineNumber": 1750,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    while (enumeration.hasMoreElements()) {",
                        "lineNumber": 1751,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        NameClassPair ncPair = enumeration.nextElement();",
                        "lineNumber": 1752,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        String childDest = dest;",
                        "lineNumber": 1753,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (!childDest.equals(\"/\"))",
                        "lineNumber": 1754,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            childDest += \"/\";",
                        "lineNumber": 1755,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        childDest += ncPair.getName();",
                        "lineNumber": 1756,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        String childSrc = source;",
                        "lineNumber": 1757,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (!childSrc.equals(\"/\"))",
                        "lineNumber": 1758,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            childSrc += \"/\";",
                        "lineNumber": 1759,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        childSrc += ncPair.getName();",
                        "lineNumber": 1760,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        copyResource(dirContext, errorList, childSrc, childDest);",
                        "lineNumber": 1761,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (sourceResource.isDirectory()) {",
                        "lineNumber": 1651,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!resources.mkdir(dest)) {",
                        "lineNumber": 1652,
                        "lineChange": "added"
                      },
                      {
                        "line": "        WebResource destResource = resources.getResource(dest);",
                        "lineNumber": 1653,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (!destResource.isDirectory()) {",
                        "lineNumber": 1654,
                        "lineChange": "added"
                      },
                      {
                        "line": "            errorList.put(dest, new Integer(WebdavStatus.SC_CONFLICT));",
                        "lineNumber": 1655,
                        "lineChange": "added"
                      },
                      {
                        "line": "            return false;",
                        "lineNumber": 1656,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1762,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1763,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        errorList.put",
                        "lineNumber": 1764,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (dest, new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1765,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1766,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1767,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (object instanceof Resource) {",
                        "lineNumber": 1771,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 1772,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        dirContext.bind(dest, object);",
                        "lineNumber": 1773,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1774,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (e.getCause() instanceof FileNotFoundException) {",
                        "lineNumber": 1775,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            // We know the source exists so it must be the",
                        "lineNumber": 1776,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            // destination dir that can't be found",
                        "lineNumber": 1777,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            errorList.put(source,",
                        "lineNumber": 1778,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                    new Integer(WebdavStatus.SC_CONFLICT));",
                        "lineNumber": 1779,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        } else {",
                        "lineNumber": 1780,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            errorList.put(source,",
                        "lineNumber": 1781,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                    new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1782,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1783,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String[] entries = resources.list(source);",
                        "lineNumber": 1660,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (String entry : entries) {",
                        "lineNumber": 1661,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String childDest = dest;",
                        "lineNumber": 1662,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!childDest.equals(\"/\")) {",
                        "lineNumber": 1663,
                        "lineChange": "added"
                      },
                      {
                        "line": "        childDest += \"/\";",
                        "lineNumber": 1664,
                        "lineChange": "added"
                      },
                      {
                        "line": "         }",
                        "lineNumber": 1785,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 1786,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        errorList.put",
                        "lineNumber": 1787,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (source,",
                        "lineNumber": 1788,
                        "lineChange": "removed"
                      },
                      {
                        "line": "             new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1789,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        childDest += entry;",
                        "lineNumber": 1666,
                        "lineChange": "added"
                      },
                      {
                        "line": "        String childSrc = source;",
                        "lineNumber": 1667,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (!childSrc.equals(\"/\")) {",
                        "lineNumber": 1668,
                        "lineChange": "added"
                      },
                      {
                        "line": "            childSrc += \"/\";",
                        "lineNumber": 1669,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1670,
                        "lineChange": "added"
                      },
                      {
                        "line": "        childSrc += entry;",
                        "lineNumber": 1671,
                        "lineChange": "added"
                      },
                      {
                        "line": "        copyResource(errorList, childSrc, childDest);",
                        "lineNumber": 1672,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1673,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else if (sourceResource.isFile()) {",
                        "lineNumber": 1674,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!resources.write(dest, sourceResource.getInputStream())) {",
                        "lineNumber": 1675,
                        "lineChange": "added"
                      },
                      {
                        "line": "        errorList.put(source,",
                        "lineNumber": 1676,
                        "lineChange": "added"
                      },
                      {
                        "line": "                new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1677,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1790,
                        "lineChange": "none"
                      },
                      {
                        "line": "     }",
                        "lineNumber": 1791,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 1680,
                        "lineChange": "added"
                      },
                      {
                        "line": "    errorList.put(source,",
                        "lineNumber": 1681,
                        "lineChange": "added"
                      },
                      {
                        "line": "            new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1682,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1683,
                        "lineChange": "added"
                      },
                      {
                        "line": " * @return boolean true if the copy is successful",
                        "lineNumber": 1805,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1806,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean deleteResource(HttpServletRequest req,",
                        "lineNumber": 1807,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               HttpServletResponse resp)",
                        "lineNumber": 1808,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1809,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 1811,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteResource(path, req, resp, true);",
                        "lineNumber": 1813,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1815,
                        "lineChange": "none"
                      },
                      {
                        "line": " *                  completion",
                        "lineNumber": 1825,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1826,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean deleteResource(String path, HttpServletRequest req,",
                        "lineNumber": 1827,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               HttpServletResponse resp, boolean setStatus)",
                        "lineNumber": 1828,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1829,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String ifHeader = req.getHeader(\"If\");",
                        "lineNumber": 1831,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (ifHeader == null)",
                        "lineNumber": 1832,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ifHeader = \"\";",
                        "lineNumber": 1833,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String lockTokenHeader = req.getHeader(\"Lock-Token\");",
                        "lineNumber": 1835,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (lockTokenHeader == null)",
                        "lineNumber": 1836,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockTokenHeader = \"\";",
                        "lineNumber": 1837,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isLocked(path, ifHeader + lockTokenHeader)) {",
                        "lineNumber": 1839,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 1840,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1841,
                        "lineChange": "none"
                      },
                      {
                        "line": "     }",
                        "lineNumber": 1842,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 1845,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1846,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 1847,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1848,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1849,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 1733,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 1735,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!collection) {",
                        "lineNumber": 1859,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 1860,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resources.unbind(path);",
                        "lineNumber": 1861,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1862,
                        "lineChange": "removed"
                      },
                      {
                        "line": "resp.sendError(WebdavStatus.SC_INTERNAL_SERVER_ERROR);",
                        "lineNumber": 1863,
                        "lineChange": "none"
                      },
                      {
                        "line": "Hashtable<String,Integer> errorList = new Hashtable<>();",
                        "lineNumber": 1868,
                        "lineChange": "none"
                      },
                      {
                        "line": "deleteCollection(req, resources, path, errorList);",
                        "lineNumber": 1870,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1871,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.unbind(path);",
                        "lineNumber": 1872,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1873,
                        "lineChange": "removed"
                      },
                      {
                        "line": "deleteCollection(req, path, errorList);",
                        "lineNumber": 1749,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.delete()) {",
                        "lineNumber": 1750,
                        "lineChange": "added"
                      },
                      {
                        "line": "    errorList.put(path, new Integer",
                        "lineNumber": 1874,
                        "lineChange": "none"
                      },
                      {
                        "line": "        (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1875,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1876,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!errorList.isEmpty()) {",
                        "lineNumber": 1878,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sendReport(req, resp, errorList);",
                        "lineNumber": 1880,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1881,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1883,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param errorList Contains the list of the errors which occurred",
                        "lineNumber": 1899,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1900,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void deleteCollection(HttpServletRequest req,",
                        "lineNumber": 1901,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              DirContext dirContext,",
                        "lineNumber": 1902,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                              String path,",
                        "lineNumber": 1903,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Hashtable<String,Integer> errorList) {",
                        "lineNumber": 1904,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (debug > 1)",
                        "lineNumber": 1906,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log(\"Delete:\" + path);",
                        "lineNumber": 1907,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Prevent deletion of special subdirectories",
                        "lineNumber": 1909,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isSpecialPath(path)) {",
                        "lineNumber": 1910,
                        "lineChange": "none"
                      },
                      {
                        "line": "        errorList.put(path, new Integer(WebdavStatus.SC_FORBIDDEN));",
                        "lineNumber": 1911,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 1912,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1913,
                        "lineChange": "none"
                      },
                      {
                        "line": "     lockTokenHeader = \"\";",
                        "lineNumber": 1921,
                        "lineChange": "none"
                      },
                      {
                        "line": "Enumeration<NameClassPair> enumeration = null;",
                        "lineNumber": 1923,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1924,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    enumeration = dirContext.list(path);",
                        "lineNumber": 1925,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1926,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put(path, new Integer",
                        "lineNumber": 1927,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1928,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 1929,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String[] entries = resources.list(path);",
                        "lineNumber": 1794,
                        "lineChange": "added"
                      },
                      {
                        "line": "while (enumeration.hasMoreElements()) {",
                        "lineNumber": 1932,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    NameClassPair ncPair = enumeration.nextElement();",
                        "lineNumber": 1933,
                        "lineChange": "removed"
                      },
                      {
                        "line": "for (String entry : entries) {",
                        "lineNumber": 1796,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String childName = path;",
                        "lineNumber": 1934,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!childName.equals(\"/\"))",
                        "lineNumber": 1935,
                        "lineChange": "none"
                      },
                      {
                        "line": "        childName += \"/\";",
                        "lineNumber": 1936,
                        "lineChange": "none"
                      },
                      {
                        "line": "    childName += ncPair.getName();",
                        "lineNumber": 1937,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    childName += entry;",
                        "lineNumber": 1800,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (isLocked(childName, ifHeader + lockTokenHeader)) {",
                        "lineNumber": 1939,
                        "lineChange": "none"
                      },
                      {
                        "line": "        errorList.put(childName, new Integer(WebdavStatus.SC_LOCKED));",
                        "lineNumber": 1941,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 1943,
                        "lineChange": "none"
                      },
                      {
                        "line": "        WebResource childResource = resources.getResource(childName);",
                        "lineNumber": 1807,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (childResource.isDirectory()) {",
                        "lineNumber": 1808,
                        "lineChange": "added"
                      },
                      {
                        "line": "            deleteCollection(req, childName, errorList);",
                        "lineNumber": 1809,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1810,
                        "lineChange": "added"
                      },
                      {
                        "line": "        try {",
                        "lineNumber": 1945,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            Object object = dirContext.lookup(childName);",
                        "lineNumber": 1946,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            if (object instanceof DirContext) {",
                        "lineNumber": 1947,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                deleteCollection(req, dirContext, childName, errorList);",
                        "lineNumber": 1948,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 1949,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            try {",
                        "lineNumber": 1951,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                dirContext.unbind(childName);",
                        "lineNumber": 1952,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            } catch (NamingException e) {",
                        "lineNumber": 1953,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                if (!(object instanceof DirContext)) {",
                        "lineNumber": 1954,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    // error",
                        "lineNumber": 1956,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put",
                        "lineNumber": 1957,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (childName, new Integer",
                        "lineNumber": 1958,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1959,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1960,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        // If it's not a collection, then it's an unknown",
                        "lineNumber": 1814,
                        "lineChange": "added"
                      },
                      {
                        "line": "        // error",
                        "lineNumber": 1815,
                        "lineChange": "added"
                      },
                      {
                        "line": "        errorList.put(childName, new Integer(",
                        "lineNumber": 1816,
                        "lineChange": "added"
                      },
                      {
                        "line": "                WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1817,
                        "lineChange": "added"
                      },
                      {
                        "line": "     }",
                        "lineNumber": 1961,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1962,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put",
                        "lineNumber": 1963,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (childName, new Integer",
                        "lineNumber": 1964,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1965,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1966,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param errorList List of error to be displayed",
                        "lineNumber": 1980,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1981,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void sendReport(HttpServletRequest req, HttpServletResponse resp,",
                        "lineNumber": 1982,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        Hashtable<String,Integer> errorList)",
                        "lineNumber": 1983,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1984,
                        "lineChange": "none"
                      },
                      {
                        "line": "resp.setStatus(WebdavStatus.SC_MULTI_STATUS);",
                        "lineNumber": 1986,
                        "lineChange": "none"
                      },
                      {
                        "line": "String absoluteUri = req.getRequestURI();",
                        "lineNumber": 1988,
                        "lineChange": "none"
                      },
                      {
                        "line": "String relativePath = getRelativePath(req);",
                        "lineNumber": 1989,
                        "lineChange": "none"
                      },
                      {
                        "line": "XMLWriter generatedXML = new XMLWriter();",
                        "lineNumber": 1991,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.OPENING);",
                        "lineNumber": 2005,
                        "lineChange": "none"
                      },
                      {
                        "line": "String toAppend = errorPath.substring(relativePath.length());",
                        "lineNumber": 2006,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!toAppend.startsWith(\"/\"))",
                        "lineNumber": 2007,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toAppend = \"/\" + toAppend;",
                        "lineNumber": 2008,
                        "lineChange": "none"
                      },
                      {
                        "line": " * name, then this Vector contains those properties",
                        "lineNumber": 2038,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2039,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void parseProperties(HttpServletRequest req,",
                        "lineNumber": 2040,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             XMLWriter generatedXML,",
                        "lineNumber": 2041,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             String path, int type,",
                        "lineNumber": 2042,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Vector<String> propertiesVector) {",
                        "lineNumber": 2043,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Exclude any resource in the /WEB-INF and /META-INF subdirectories",
                        "lineNumber": 2045,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isSpecialPath(path))",
                        "lineNumber": 2046,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 2047,
                        "lineChange": "none"
                      },
                      {
                        "line": "    CacheEntry cacheEntry = resources.lookupCache(path);",
                        "lineNumber": 2049,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!cacheEntry.exists) {",
                        "lineNumber": 2050,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    WebResource resource = resources.getResource(path);",
                        "lineNumber": 1900,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!resource.exists()) {",
                        "lineNumber": 1901,
                        "lineChange": "added"
                      },
                      {
                        "line": "        // File is in directory listing but doesn't appear to exist",
                        "lineNumber": 2051,
                        "lineChange": "none"
                      },
                      {
                        "line": "         // Broken symlink or odd permission settings?",
                        "lineNumber": 2052,
                        "lineChange": "none"
                      },
                      {
                        "line": "String href = req.getContextPath() + req.getServletPath();",
                        "lineNumber": 2063,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ((href.endsWith(\"/\")) && (path.startsWith(\"/\")))",
                        "lineNumber": 2064,
                        "lineChange": "none"
                      },
                      {
                        "line": "    href += path.substring(1);",
                        "lineNumber": 2065,
                        "lineChange": "none"
                      },
                      {
                        "line": "else",
                        "lineNumber": 2066,
                        "lineChange": "none"
                      },
                      {
                        "line": "    href += path;",
                        "lineNumber": 2067,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ((cacheEntry.context != null) && (!href.endsWith(\"/\")))",
                        "lineNumber": 2068,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (resource.isDirectory() && (!href.endsWith(\"/\")))",
                        "lineNumber": 1919,
                        "lineChange": "added"
                      },
                      {
                        "line": "    href += \"/\";",
                        "lineNumber": 2069,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.CLOSING);",
                        "lineNumber": 2073,
                        "lineChange": "none"
                      },
                      {
                        "line": "String resourceName = path;",
                        "lineNumber": 2075,
                        "lineChange": "none"
                      },
                      {
                        "line": "int lastSlash = path.lastIndexOf('/');",
                        "lineNumber": 2076,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lastSlash != -1)",
                        "lineNumber": 2077,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resourceName = resourceName.substring(lastSlash + 1);",
                        "lineNumber": 2078,
                        "lineChange": "none"
                      },
                      {
                        "line": "switch (type) {",
                        "lineNumber": 2080,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.OPENING);",
                        "lineNumber": 2089,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2090,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.CLOSING);",
                        "lineNumber": 2091,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"supportedlock\", XMLWriter.CLOSING);",
                        "lineNumber": 2129,
                        "lineChange": "none"
                      },
                      {
                        "line": "generateLockDiscovery(path, generatedXML);",
                        "lineNumber": 2131,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"prop\", XMLWriter.CLOSING);",
                        "lineNumber": 2133,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement",
                        "lineNumber": 2194,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (\"D\", \"displayname\", XMLWriter.OPENING);",
                        "lineNumber": 2195,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2196,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement",
                        "lineNumber": 2197,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (\"D\", \"displayname\", XMLWriter.CLOSING);",
                        "lineNumber": 2198,
                        "lineChange": "none"
                      },
                      {
                        "line": "            XMLWriter.CLOSING);",
                        "lineNumber": 2264,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (property.equals(\"lockdiscovery\")) {",
                        "lineNumber": 2265,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!generateLockDiscovery(path, generatedXML))",
                        "lineNumber": 2266,
                        "lineChange": "none"
                      },
                      {
                        "line": "        propertiesNotFound.addElement(property);",
                        "lineNumber": 2267,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 2268,
                        "lineChange": "none"
                      },
                      {
                        "line": " * name, then this Vector contains those properties",
                        "lineNumber": 2322,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2323,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void parseLockNullProperties(HttpServletRequest req,",
                        "lineNumber": 2324,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     XMLWriter generatedXML,",
                        "lineNumber": 2325,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     String path, int type,",
                        "lineNumber": 2326,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     Vector<String> propertiesVector) {",
                        "lineNumber": 2327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Exclude any resource in the /WEB-INF and /META-INF subdirectories",
                        "lineNumber": 2329,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isSpecialPath(path))",
                        "lineNumber": 2330,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 2331,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Retrieving the lock associated with the lock-null resource",
                        "lineNumber": 2333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo lock = resourceLocks.get(path);",
                        "lineNumber": 2334,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (lock == null)",
                        "lineNumber": 2336,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.OPENING);",
                        "lineNumber": 2344,
                        "lineChange": "none"
                      },
                      {
                        "line": "String absoluteUri = req.getRequestURI();",
                        "lineNumber": 2346,
                        "lineChange": "none"
                      },
                      {
                        "line": "String relativePath = getRelativePath(req);",
                        "lineNumber": 2347,
                        "lineChange": "none"
                      },
                      {
                        "line": "String toAppend = path.substring(relativePath.length());",
                        "lineNumber": 2348,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!toAppend.startsWith(\"/\"))",
                        "lineNumber": 2349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toAppend = \"/\" + toAppend;",
                        "lineNumber": 2350,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.CLOSING);",
                        "lineNumber": 2355,
                        "lineChange": "none"
                      },
                      {
                        "line": "String resourceName = path;",
                        "lineNumber": 2357,
                        "lineChange": "none"
                      },
                      {
                        "line": "int lastSlash = path.lastIndexOf('/');",
                        "lineNumber": 2358,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lastSlash != -1)",
                        "lineNumber": 2359,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resourceName = resourceName.substring(lastSlash + 1);",
                        "lineNumber": 2360,
                        "lineChange": "none"
                      },
                      {
                        "line": "switch (type) {",
                        "lineNumber": 2362,
                        "lineChange": "none"
                      },
                      {
                        "line": "        getISOCreationDate(lock.creationDate.getTime()));",
                        "lineNumber": 2370,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.OPENING);",
                        "lineNumber": 2371,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2372,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.CLOSING);",
                        "lineNumber": 2373,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeProperty(\"D\", \"getlastmodified\",",
                        "lineNumber": 2374,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"supportedlock\", XMLWriter.CLOSING);",
                        "lineNumber": 2396,
                        "lineChange": "none"
                      },
                      {
                        "line": "generateLockDiscovery(path, generatedXML);",
                        "lineNumber": 2398,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"prop\", XMLWriter.CLOSING);",
                        "lineNumber": 2400,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\",",
                        "lineNumber": 2458,
                        "lineChange": "none"
                      },
                      {
                        "line": "        XMLWriter.OPENING);",
                        "lineNumber": 2459,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2460,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\",",
                        "lineNumber": 2461,
                        "lineChange": "none"
                      },
                      {
                        "line": "        XMLWriter.CLOSING);",
                        "lineNumber": 2462,
                        "lineChange": "none"
                      },
                      {
                        "line": "            XMLWriter.CLOSING);",
                        "lineNumber": 2499,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (property.equals(\"lockdiscovery\")) {",
                        "lineNumber": 2500,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!generateLockDiscovery(path, generatedXML))",
                        "lineNumber": 2501,
                        "lineChange": "none"
                      },
                      {
                        "line": "        propertiesNotFound.addElement(property);",
                        "lineNumber": 2502,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 2503,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2554,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean generateLockDiscovery",
                        "lineNumber": 2555,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (String path, XMLWriter generatedXML) {",
                        "lineNumber": 2556,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo resourceLock = resourceLocks.get(path);",
                        "lineNumber": 2558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<LockInfo> collectionLocksList = collectionLocks.elements();",
                        "lineNumber": 2559,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (collectionLocksList.hasMoreElements()) {",
                        "lineNumber": 2569,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo currentLock = collectionLocksList.nextElement();",
                        "lineNumber": 2570,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (path.startsWith(currentLock.path)) {",
                        "lineNumber": 2571,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!wroteStart) {",
                        "lineNumber": 2572,
                        "lineChange": "none"
                      },
                      {
                        "line": "            wroteStart = true;",
                        "lineNumber": 2573,
                        "lineChange": "none"
                      },
                      {
                        "line": " *",
                        "lineNumber": 2601,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2602,
                        "lineChange": "none"
                      },
                      {
                        "line": "private StringBuilder determineMethodsAllowed(DirContext dirContext,",
                        "lineNumber": 2603,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                             HttpServletRequest req) {",
                        "lineNumber": 2604,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private StringBuilder determineMethodsAllowed(HttpServletRequest req) {",
                        "lineNumber": 2453,
                        "lineChange": "added"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = new StringBuilder();",
                        "lineNumber": 2606,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 2608,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 2609,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 2610,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = dirContext.lookup(path);",
                        "lineNumber": 2612,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 2613,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 2614,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(getRelativePath(req));",
                        "lineNumber": 2457,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 2459,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Introduce cache for LDAP authentication",
                  "Merge new resources implementation from sandbox/trunk-resources"
                ],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-90"
                ]
              }
            },
            {
              "id": "java/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/lutece-platform/lutece-core/commit/5387450fe0f3cf1b705bda89d553a6f67bc342b6?diff=split#diff-015efa4f075bbbac52efd486f29f3ca5L80",
                    "lines": [
                      {
                        "line": " *             the io exception",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void processRequest( HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String strValue = request.getParameter( PARAMETER_DATA );",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String strValueReturn = ( strValue != null ) ? EditorBbcodeService.getInstance( ).parse( strValue ) : \"\";",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    String strEscaped = StringEscapeUtils.escapeHtml( strValue );",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String strValueReturn = ( strValue != null ) ? EditorBbcodeService.getInstance( ).parse( strEscaped ) : \"\";",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "    OutputStream out = response.getOutputStream( );",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    out.write( strValueReturn.getBytes( AppPropertiesService.getProperty( PROPERTY_ENCODING ) ) );",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    out.flush( );",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    out.close( );",
                        "lineNumber": 89,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/square/keywhiz/commit/b08aeb5d31e17cd3706f646c595884181813121b?diff=split#diff-37c8fdba6768ae3e9126a316519ae714L35",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override protected void doPost(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String path = req.getPathInfo();",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  String path = StringEscapeUtils.escapeHtml4(req.getPathInfo());",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if(path != null && path.equals(\"/enable\")){",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mshc.setHealthy(true);",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else if(path != null && path.equals(\"/disable\")) {",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mshc.setHealthy(false);",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(HttpServletResponse.SC_NOT_FOUND,",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"Need to pass /status/enable or /status/disable, not /status\" + path);",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 46,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apereo/cas/commit/9d81e9ba85945b0d0caaab58b10bf0c3b2e0af73?diff=split#diff-d950cb17562422f18fa1b11dc72e57deL72",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "public final boolean preHandle(final HttpServletRequest request, final HttpServletResponse response, final Object o) throws Exception {",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // we only care about post because that's the only instance where we can get anything useful besides IP address.",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!\"POST\".equals(request.getMethod())) {",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return true;",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (exceedsThreshold(request)) {",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        recordThrottle(request);",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        response.sendError(403, \"Access Denied for user [\" + request.getParameter(usernameParameter)",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        final String username = StringEscapeUtils.escapeHtml4(request.getParameter(usernameParameter));",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "        response.sendError(403, \"Access Denied for user [\" + username",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "                            + \" from IP Address [\" + request.getRemoteAddr() + \"]\");",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param request the request",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void recordThrottle(final HttpServletRequest request) {",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "    logger.warn(\"Throttling submission from {}.  More than {} failed login attempts within {} seconds.\",",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "            new Object[] {request.getRemoteAddr(), failureThreshold, failureRangeInSeconds});",
                        "lineNumber": 147,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Also started a IT testing harness to test servlets with a live sling instance",
                  "* using properties file so that spring boot can read it too"
                ],
                "precision": "very-high",
                "repoDatasetSize": 308,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "java/InsecureCipher",
              "name": "InsecureCipher",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/matthewmccullough/encryption-jvm-bootcamp/commit/de0bb8bb6143d1c24c7d31c238f04b6eae009393?diff=split#diff-cb0790c00644741f9df5a7f311aec96aL36",
                    "lines": [
                      {
                        "line": "//Set up the cipher",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cipher desCipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final Cipher desCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "//////////////////////////////////////",
                        "lineNumber": 37,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/TrsstProject/trsst/commit/50df034a0214314137898d9abb41ddf9770f0d67?diff=split#diff-93779de8272688c3ecb0711530fa8fa3L634",
                    "lines": [
                      {
                        "line": " IESCipher cipher = new IESCipher(new IESEngine(",
                        "lineNumber": 632,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new ECDHBasicAgreement(), new KDF2BytesGenerator(",
                        "lineNumber": 633,
                        "lineChange": "none"
                      },
                      {
                        "line": "                new SHA1Digest()), new HMac(new SHA1Digest()),",
                        "lineNumber": 632,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        new PaddedBufferedBlockCipher(new DESEngine())));",
                        "lineNumber": 633,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                new SHA1Digest()), new HMac(new SHA256Digest()),",
                        "lineNumber": 634,
                        "lineChange": "added"
                      },
                      {
                        "line": "        new PaddedBufferedBlockCipher(new AESEngine())));",
                        "lineNumber": 635,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.engineInit(Cipher.ENCRYPT_MODE, publicKey,",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new SecureRandom());",
                        "lineNumber": 637,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/cloudstack/commit/34f8f795e15b89477f72aa6f1e69f7797c930db4?diff=split#diff-56788b012a7afc046f3c8de66500236aL55",
                    "lines": [
                      {
                        "line": "try {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "  Cipher cipher = Cipher.getInstance(\"DES\");",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  int maxKeySize = 8;",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  SecretKeySpec keySpec = new SecretKeySpec(normalizeKey(password.getBytes(), maxKeySize), \"DES\");",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "  SecretKeySpec keySpec = new SecretKeySpec(keyIvPair.getKeyBytes(), \"AES\");",
                        "lineNumber": 57,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Adding AES example and unit test",
                  "Removed IDEA and RC2 CipherSuites to make it clear they are not\nsupported.",
                  "- added *_AES_* cipher suites to SSLEngine (and therefore Java SSLSocketImpl)"
                ],
                "precision": "very-high",
                "repoDatasetSize": 50,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "java/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tita/tita/commit/398f6b776a2aea7f20bf604768b8721beff8d93a?diff=split#diff-dd34c5e6a15ca48bff6f9ca749e68243L164",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String getHashedPassword(String pwd) throws NoSuchAlgorithmException {",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 163,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    byte[] encryptMsg = md.digest(pwd.getBytes());",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(encryptMsg);",
                        "lineNumber": 165,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return bytes2String(encryptMsg);",
                        "lineNumber": 105,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/devonfw/my-thai-star/commit/095a3fb6bb860a2411cb51e812121ec2a6b99894?diff=split#diff-4f73d1042058dd462057744068125d4eL242",
                    "lines": [
                      {
                        "line": "    + String.format(\"%02d\", ldt1.getSecond());",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"MD5\");",
                        "lineNumber": 241,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.update((email + date + time).getBytes());",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] digest = md.digest();",
                        "lineNumber": 244,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SecurityCompass/AndroidLabs/commit/5608f75dd665beac85dbad08f80b91d73b27904a?diff=split#diff-ffc047d4a5f84de13e373f2392bfb11bL148",
                    "lines": [
                      {
                        "line": "byte[] passwordBytes = (password).getBytes(\"UTF-8\");",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.reset();",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "md.update(salt);",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added an enum for the supported encryption algorithms",
                  "Added #hash(byte[], String)",
                  "Added support for\nsha256 and nonce token."
                ],
                "precision": "very-high",
                "repoDatasetSize": 122,
                "cwe": [
                  "CWE-916"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/Sqli",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into executeUpdate, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[executeUpdate](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 25,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ae420f466c438a07f83839c953ad67d48c6a47b8db137dea582f78d7310eae70",
            "1": "19689298.83dbfe52.62790746.7723e099.9c64308b.7a44f5da.f189b689.54d46e25.c9f51d48.0cb0dce9.62790746.66516a7b.0f22ce88.aebaea90.0ac97cd8.0dceee21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 16,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 22,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 22,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 16,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 49,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 25,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 756,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into write, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[write](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 13,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7ec672c875358716d1019adda98d870d5254cdd561c102bbc6b8ad2d20f7d7ac",
            "1": "46d785bf.49766a9f.a7db88c8.8bdc56f8.390f960b.21fcf215.ec290f27.54d46e25.19689298.0cb0dce9.ae546236.d6ab05b5.0f22ce88.aebaea90.76a0da3b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 24,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 24,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 16,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 22,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 40,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 13,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 760,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 2766,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 2778,
            "isSupported": true,
            "lang": "HTML"
          },
          {
            "files": 6,
            "isSupported": true,
            "lang": "JavaScript"
          },
          {
            "files": 2763,
            "isSupported": true,
            "lang": "Java"
          }
        ]
      }
    }
  ]
}
